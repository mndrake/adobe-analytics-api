# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PublishingStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'published': 'bool',
        'published_date': 'datetime',
        'lookback_period': 'int',
        'lookback_granularity': 'str'
    }

    attribute_map = {
        'published': 'published',
        'published_date': 'publishedDate',
        'lookback_period': 'lookbackPeriod',
        'lookback_granularity': 'lookbackGranularity'
    }

    def __init__(self, published=None, published_date=None, lookback_period=None, lookback_granularity=None):  # noqa: E501
        """PublishingStatus - a model defined in Swagger"""  # noqa: E501
        self._published = None
        self._published_date = None
        self._lookback_period = None
        self._lookback_granularity = None
        self.discriminator = None
        if published is not None:
            self.published = published
        if published_date is not None:
            self.published_date = published_date
        if lookback_period is not None:
            self.lookback_period = lookback_period
        if lookback_granularity is not None:
            self.lookback_granularity = lookback_granularity

    @property
    def published(self):
        """Gets the published of this PublishingStatus.  # noqa: E501


        :return: The published of this PublishingStatus.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this PublishingStatus.


        :param published: The published of this PublishingStatus.  # noqa: E501
        :type: bool
        """

        self._published = published

    @property
    def published_date(self):
        """Gets the published_date of this PublishingStatus.  # noqa: E501


        :return: The published_date of this PublishingStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._published_date

    @published_date.setter
    def published_date(self, published_date):
        """Sets the published_date of this PublishingStatus.


        :param published_date: The published_date of this PublishingStatus.  # noqa: E501
        :type: datetime
        """

        self._published_date = published_date

    @property
    def lookback_period(self):
        """Gets the lookback_period of this PublishingStatus.  # noqa: E501


        :return: The lookback_period of this PublishingStatus.  # noqa: E501
        :rtype: int
        """
        return self._lookback_period

    @lookback_period.setter
    def lookback_period(self, lookback_period):
        """Sets the lookback_period of this PublishingStatus.


        :param lookback_period: The lookback_period of this PublishingStatus.  # noqa: E501
        :type: int
        """

        self._lookback_period = lookback_period

    @property
    def lookback_granularity(self):
        """Gets the lookback_granularity of this PublishingStatus.  # noqa: E501


        :return: The lookback_granularity of this PublishingStatus.  # noqa: E501
        :rtype: str
        """
        return self._lookback_granularity

    @lookback_granularity.setter
    def lookback_granularity(self, lookback_granularity):
        """Sets the lookback_granularity of this PublishingStatus.


        :param lookback_granularity: The lookback_granularity of this PublishingStatus.  # noqa: E501
        :type: str
        """

        self._lookback_granularity = lookback_granularity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublishingStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublishingStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
