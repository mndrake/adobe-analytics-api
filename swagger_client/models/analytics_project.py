# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsProject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'rsid': 'str',
        'report_suite_name': 'str',
        'owner': 'Owner',
        'type': 'str',
        'definition': 'JsonNode',
        'external_references': 'dict(str, list[str])',
        'access_level': 'str',
        'version_notes': 'str',
        'tags': 'list[dict(str, object)]',
        'shares': 'list[dict(str, object)]',
        'modified': 'datetime',
        'created': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'rsid': 'rsid',
        'report_suite_name': 'reportSuiteName',
        'owner': 'owner',
        'type': 'type',
        'definition': 'definition',
        'external_references': 'externalReferences',
        'access_level': 'accessLevel',
        'version_notes': 'versionNotes',
        'tags': 'tags',
        'shares': 'shares',
        'modified': 'modified',
        'created': 'created'
    }

    def __init__(self, id=None, name=None, description=None, rsid=None, report_suite_name=None, owner=None, type=None, definition=None, external_references=None, access_level=None, version_notes=None, tags=None, shares=None, modified=None, created=None):  # noqa: E501
        """AnalyticsProject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._rsid = None
        self._report_suite_name = None
        self._owner = None
        self._type = None
        self._definition = None
        self._external_references = None
        self._access_level = None
        self._version_notes = None
        self._tags = None
        self._shares = None
        self._modified = None
        self._created = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if rsid is not None:
            self.rsid = rsid
        if report_suite_name is not None:
            self.report_suite_name = report_suite_name
        if owner is not None:
            self.owner = owner
        if type is not None:
            self.type = type
        if definition is not None:
            self.definition = definition
        if external_references is not None:
            self.external_references = external_references
        if access_level is not None:
            self.access_level = access_level
        if version_notes is not None:
            self.version_notes = version_notes
        if tags is not None:
            self.tags = tags
        if shares is not None:
            self.shares = shares
        if modified is not None:
            self.modified = modified
        if created is not None:
            self.created = created

    @property
    def id(self):
        """Gets the id of this AnalyticsProject.  # noqa: E501

        System generated id  # noqa: E501

        :return: The id of this AnalyticsProject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnalyticsProject.

        System generated id  # noqa: E501

        :param id: The id of this AnalyticsProject.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AnalyticsProject.  # noqa: E501


        :return: The name of this AnalyticsProject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalyticsProject.


        :param name: The name of this AnalyticsProject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AnalyticsProject.  # noqa: E501


        :return: The description of this AnalyticsProject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AnalyticsProject.


        :param description: The description of this AnalyticsProject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def rsid(self):
        """Gets the rsid of this AnalyticsProject.  # noqa: E501

        The report suite id for which the component was created/updated  # noqa: E501

        :return: The rsid of this AnalyticsProject.  # noqa: E501
        :rtype: str
        """
        return self._rsid

    @rsid.setter
    def rsid(self, rsid):
        """Sets the rsid of this AnalyticsProject.

        The report suite id for which the component was created/updated  # noqa: E501

        :param rsid: The rsid of this AnalyticsProject.  # noqa: E501
        :type: str
        """

        self._rsid = rsid

    @property
    def report_suite_name(self):
        """Gets the report_suite_name of this AnalyticsProject.  # noqa: E501

        The report suite name for which the component was created/updated  # noqa: E501

        :return: The report_suite_name of this AnalyticsProject.  # noqa: E501
        :rtype: str
        """
        return self._report_suite_name

    @report_suite_name.setter
    def report_suite_name(self, report_suite_name):
        """Sets the report_suite_name of this AnalyticsProject.

        The report suite name for which the component was created/updated  # noqa: E501

        :param report_suite_name: The report_suite_name of this AnalyticsProject.  # noqa: E501
        :type: str
        """

        self._report_suite_name = report_suite_name

    @property
    def owner(self):
        """Gets the owner of this AnalyticsProject.  # noqa: E501


        :return: The owner of this AnalyticsProject.  # noqa: E501
        :rtype: Owner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this AnalyticsProject.


        :param owner: The owner of this AnalyticsProject.  # noqa: E501
        :type: Owner
        """

        self._owner = owner

    @property
    def type(self):
        """Gets the type of this AnalyticsProject.  # noqa: E501


        :return: The type of this AnalyticsProject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AnalyticsProject.


        :param type: The type of this AnalyticsProject.  # noqa: E501
        :type: str
        """
        allowed_values = ["project", "mobileScorecard"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def definition(self):
        """Gets the definition of this AnalyticsProject.  # noqa: E501


        :return: The definition of this AnalyticsProject.  # noqa: E501
        :rtype: JsonNode
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this AnalyticsProject.


        :param definition: The definition of this AnalyticsProject.  # noqa: E501
        :type: JsonNode
        """

        self._definition = definition

    @property
    def external_references(self):
        """Gets the external_references of this AnalyticsProject.  # noqa: E501


        :return: The external_references of this AnalyticsProject.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._external_references

    @external_references.setter
    def external_references(self, external_references):
        """Sets the external_references of this AnalyticsProject.


        :param external_references: The external_references of this AnalyticsProject.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._external_references = external_references

    @property
    def access_level(self):
        """Gets the access_level of this AnalyticsProject.  # noqa: E501


        :return: The access_level of this AnalyticsProject.  # noqa: E501
        :rtype: str
        """
        return self._access_level

    @access_level.setter
    def access_level(self, access_level):
        """Sets the access_level of this AnalyticsProject.


        :param access_level: The access_level of this AnalyticsProject.  # noqa: E501
        :type: str
        """

        self._access_level = access_level

    @property
    def version_notes(self):
        """Gets the version_notes of this AnalyticsProject.  # noqa: E501


        :return: The version_notes of this AnalyticsProject.  # noqa: E501
        :rtype: str
        """
        return self._version_notes

    @version_notes.setter
    def version_notes(self, version_notes):
        """Sets the version_notes of this AnalyticsProject.


        :param version_notes: The version_notes of this AnalyticsProject.  # noqa: E501
        :type: str
        """

        self._version_notes = version_notes

    @property
    def tags(self):
        """Gets the tags of this AnalyticsProject.  # noqa: E501


        :return: The tags of this AnalyticsProject.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AnalyticsProject.


        :param tags: The tags of this AnalyticsProject.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._tags = tags

    @property
    def shares(self):
        """Gets the shares of this AnalyticsProject.  # noqa: E501


        :return: The shares of this AnalyticsProject.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this AnalyticsProject.


        :param shares: The shares of this AnalyticsProject.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._shares = shares

    @property
    def modified(self):
        """Gets the modified of this AnalyticsProject.  # noqa: E501


        :return: The modified of this AnalyticsProject.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this AnalyticsProject.


        :param modified: The modified of this AnalyticsProject.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def created(self):
        """Gets the created of this AnalyticsProject.  # noqa: E501


        :return: The created of this AnalyticsProject.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AnalyticsProject.


        :param created: The created of this AnalyticsProject.  # noqa: E501
        :type: datetime
        """

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsProject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsProject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
