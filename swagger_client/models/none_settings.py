# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NoneSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include_none_by_default': 'bool',
        'none_changeable': 'bool'
    }

    attribute_map = {
        'include_none_by_default': 'includeNoneByDefault',
        'none_changeable': 'noneChangeable'
    }

    def __init__(self, include_none_by_default=None, none_changeable=None):  # noqa: E501
        """NoneSettings - a model defined in Swagger"""  # noqa: E501
        self._include_none_by_default = None
        self._none_changeable = None
        self.discriminator = None
        if include_none_by_default is not None:
            self.include_none_by_default = include_none_by_default
        if none_changeable is not None:
            self.none_changeable = none_changeable

    @property
    def include_none_by_default(self):
        """Gets the include_none_by_default of this NoneSettings.  # noqa: E501


        :return: The include_none_by_default of this NoneSettings.  # noqa: E501
        :rtype: bool
        """
        return self._include_none_by_default

    @include_none_by_default.setter
    def include_none_by_default(self, include_none_by_default):
        """Sets the include_none_by_default of this NoneSettings.


        :param include_none_by_default: The include_none_by_default of this NoneSettings.  # noqa: E501
        :type: bool
        """

        self._include_none_by_default = include_none_by_default

    @property
    def none_changeable(self):
        """Gets the none_changeable of this NoneSettings.  # noqa: E501


        :return: The none_changeable of this NoneSettings.  # noqa: E501
        :rtype: bool
        """
        return self._none_changeable

    @none_changeable.setter
    def none_changeable(self, none_changeable):
        """Sets the none_changeable of this NoneSettings.


        :param none_changeable: The none_changeable of this NoneSettings.  # noqa: E501
        :type: bool
        """

        self._none_changeable = none_changeable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NoneSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NoneSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
