# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportMetric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'column_id': 'str',
        'filters': 'list[str]',
        'sort': 'str',
        'metric_definition': 'dict(str, object)',
        'predictive': 'ReportMetricPredictiveSettings'
    }

    attribute_map = {
        'id': 'id',
        'column_id': 'columnId',
        'filters': 'filters',
        'sort': 'sort',
        'metric_definition': 'metricDefinition',
        'predictive': 'predictive'
    }

    def __init__(self, id=None, column_id=None, filters=None, sort=None, metric_definition=None, predictive=None):  # noqa: E501
        """ReportMetric - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._column_id = None
        self._filters = None
        self._sort = None
        self._metric_definition = None
        self._predictive = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if column_id is not None:
            self.column_id = column_id
        if filters is not None:
            self.filters = filters
        if sort is not None:
            self.sort = sort
        if metric_definition is not None:
            self.metric_definition = metric_definition
        if predictive is not None:
            self.predictive = predictive

    @property
    def id(self):
        """Gets the id of this ReportMetric.  # noqa: E501


        :return: The id of this ReportMetric.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportMetric.


        :param id: The id of this ReportMetric.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def column_id(self):
        """Gets the column_id of this ReportMetric.  # noqa: E501


        :return: The column_id of this ReportMetric.  # noqa: E501
        :rtype: str
        """
        return self._column_id

    @column_id.setter
    def column_id(self, column_id):
        """Sets the column_id of this ReportMetric.


        :param column_id: The column_id of this ReportMetric.  # noqa: E501
        :type: str
        """

        self._column_id = column_id

    @property
    def filters(self):
        """Gets the filters of this ReportMetric.  # noqa: E501


        :return: The filters of this ReportMetric.  # noqa: E501
        :rtype: list[str]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ReportMetric.


        :param filters: The filters of this ReportMetric.  # noqa: E501
        :type: list[str]
        """

        self._filters = filters

    @property
    def sort(self):
        """Gets the sort of this ReportMetric.  # noqa: E501


        :return: The sort of this ReportMetric.  # noqa: E501
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this ReportMetric.


        :param sort: The sort of this ReportMetric.  # noqa: E501
        :type: str
        """

        self._sort = sort

    @property
    def metric_definition(self):
        """Gets the metric_definition of this ReportMetric.  # noqa: E501


        :return: The metric_definition of this ReportMetric.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metric_definition

    @metric_definition.setter
    def metric_definition(self, metric_definition):
        """Sets the metric_definition of this ReportMetric.


        :param metric_definition: The metric_definition of this ReportMetric.  # noqa: E501
        :type: dict(str, object)
        """

        self._metric_definition = metric_definition

    @property
    def predictive(self):
        """Gets the predictive of this ReportMetric.  # noqa: E501


        :return: The predictive of this ReportMetric.  # noqa: E501
        :rtype: ReportMetricPredictiveSettings
        """
        return self._predictive

    @predictive.setter
    def predictive(self, predictive):
        """Sets the predictive of this ReportMetric.


        :param predictive: The predictive of this ReportMetric.  # noqa: E501
        :type: ReportMetricPredictiveSettings
        """

        self._predictive = predictive

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportMetric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportMetric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
