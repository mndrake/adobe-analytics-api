# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportSearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'clause': 'str',
        'exclude_item_ids': 'list[str]',
        'item_ids': 'list[str]',
        'include_search_total': 'bool',
        'empty': 'bool'
    }

    attribute_map = {
        'clause': 'clause',
        'exclude_item_ids': 'excludeItemIds',
        'item_ids': 'itemIds',
        'include_search_total': 'includeSearchTotal',
        'empty': 'empty'
    }

    def __init__(self, clause=None, exclude_item_ids=None, item_ids=None, include_search_total=None, empty=None):  # noqa: E501
        """ReportSearch - a model defined in Swagger"""  # noqa: E501
        self._clause = None
        self._exclude_item_ids = None
        self._item_ids = None
        self._include_search_total = None
        self._empty = None
        self.discriminator = None
        if clause is not None:
            self.clause = clause
        if exclude_item_ids is not None:
            self.exclude_item_ids = exclude_item_ids
        if item_ids is not None:
            self.item_ids = item_ids
        if include_search_total is not None:
            self.include_search_total = include_search_total
        if empty is not None:
            self.empty = empty

    @property
    def clause(self):
        """Gets the clause of this ReportSearch.  # noqa: E501


        :return: The clause of this ReportSearch.  # noqa: E501
        :rtype: str
        """
        return self._clause

    @clause.setter
    def clause(self, clause):
        """Sets the clause of this ReportSearch.


        :param clause: The clause of this ReportSearch.  # noqa: E501
        :type: str
        """

        self._clause = clause

    @property
    def exclude_item_ids(self):
        """Gets the exclude_item_ids of this ReportSearch.  # noqa: E501


        :return: The exclude_item_ids of this ReportSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclude_item_ids

    @exclude_item_ids.setter
    def exclude_item_ids(self, exclude_item_ids):
        """Sets the exclude_item_ids of this ReportSearch.


        :param exclude_item_ids: The exclude_item_ids of this ReportSearch.  # noqa: E501
        :type: list[str]
        """

        self._exclude_item_ids = exclude_item_ids

    @property
    def item_ids(self):
        """Gets the item_ids of this ReportSearch.  # noqa: E501


        :return: The item_ids of this ReportSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._item_ids

    @item_ids.setter
    def item_ids(self, item_ids):
        """Sets the item_ids of this ReportSearch.


        :param item_ids: The item_ids of this ReportSearch.  # noqa: E501
        :type: list[str]
        """

        self._item_ids = item_ids

    @property
    def include_search_total(self):
        """Gets the include_search_total of this ReportSearch.  # noqa: E501


        :return: The include_search_total of this ReportSearch.  # noqa: E501
        :rtype: bool
        """
        return self._include_search_total

    @include_search_total.setter
    def include_search_total(self, include_search_total):
        """Sets the include_search_total of this ReportSearch.


        :param include_search_total: The include_search_total of this ReportSearch.  # noqa: E501
        :type: bool
        """

        self._include_search_total = include_search_total

    @property
    def empty(self):
        """Gets the empty of this ReportSearch.  # noqa: E501


        :return: The empty of this ReportSearch.  # noqa: E501
        :rtype: bool
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """Sets the empty of this ReportSearch.


        :param empty: The empty of this ReportSearch.  # noqa: E501
        :type: bool
        """

        self._empty = empty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportSearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportSearch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
