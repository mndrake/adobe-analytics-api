# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'companyid': 'int',
        'login_id': 'int',
        'login': 'str',
        'change_password': 'bool',
        'create_date': 'datetime',
        'disabled': 'bool',
        'email': 'str',
        'first_name': 'str',
        'full_name': 'str',
        'ims_user_id': 'str',
        'last_name': 'str',
        'last_access': 'datetime',
        'phone_number': 'str',
        'temp_login_end': 'datetime',
        'title': 'str'
    }

    attribute_map = {
        'companyid': 'companyid',
        'login_id': 'loginId',
        'login': 'login',
        'change_password': 'changePassword',
        'create_date': 'createDate',
        'disabled': 'disabled',
        'email': 'email',
        'first_name': 'firstName',
        'full_name': 'fullName',
        'ims_user_id': 'imsUserId',
        'last_name': 'lastName',
        'last_access': 'lastAccess',
        'phone_number': 'phoneNumber',
        'temp_login_end': 'tempLoginEnd',
        'title': 'title'
    }

    def __init__(self, companyid=None, login_id=None, login=None, change_password=None, create_date=None, disabled=None, email=None, first_name=None, full_name=None, ims_user_id=None, last_name=None, last_access=None, phone_number=None, temp_login_end=None, title=None):  # noqa: E501
        """AnalyticsUser - a model defined in Swagger"""  # noqa: E501
        self._companyid = None
        self._login_id = None
        self._login = None
        self._change_password = None
        self._create_date = None
        self._disabled = None
        self._email = None
        self._first_name = None
        self._full_name = None
        self._ims_user_id = None
        self._last_name = None
        self._last_access = None
        self._phone_number = None
        self._temp_login_end = None
        self._title = None
        self.discriminator = None
        if companyid is not None:
            self.companyid = companyid
        if login_id is not None:
            self.login_id = login_id
        if login is not None:
            self.login = login
        if change_password is not None:
            self.change_password = change_password
        if create_date is not None:
            self.create_date = create_date
        if disabled is not None:
            self.disabled = disabled
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if full_name is not None:
            self.full_name = full_name
        if ims_user_id is not None:
            self.ims_user_id = ims_user_id
        if last_name is not None:
            self.last_name = last_name
        if last_access is not None:
            self.last_access = last_access
        if phone_number is not None:
            self.phone_number = phone_number
        if temp_login_end is not None:
            self.temp_login_end = temp_login_end
        if title is not None:
            self.title = title

    @property
    def companyid(self):
        """Gets the companyid of this AnalyticsUser.  # noqa: E501


        :return: The companyid of this AnalyticsUser.  # noqa: E501
        :rtype: int
        """
        return self._companyid

    @companyid.setter
    def companyid(self, companyid):
        """Sets the companyid of this AnalyticsUser.


        :param companyid: The companyid of this AnalyticsUser.  # noqa: E501
        :type: int
        """

        self._companyid = companyid

    @property
    def login_id(self):
        """Gets the login_id of this AnalyticsUser.  # noqa: E501


        :return: The login_id of this AnalyticsUser.  # noqa: E501
        :rtype: int
        """
        return self._login_id

    @login_id.setter
    def login_id(self, login_id):
        """Sets the login_id of this AnalyticsUser.


        :param login_id: The login_id of this AnalyticsUser.  # noqa: E501
        :type: int
        """

        self._login_id = login_id

    @property
    def login(self):
        """Gets the login of this AnalyticsUser.  # noqa: E501


        :return: The login of this AnalyticsUser.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this AnalyticsUser.


        :param login: The login of this AnalyticsUser.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def change_password(self):
        """Gets the change_password of this AnalyticsUser.  # noqa: E501


        :return: The change_password of this AnalyticsUser.  # noqa: E501
        :rtype: bool
        """
        return self._change_password

    @change_password.setter
    def change_password(self, change_password):
        """Sets the change_password of this AnalyticsUser.


        :param change_password: The change_password of this AnalyticsUser.  # noqa: E501
        :type: bool
        """

        self._change_password = change_password

    @property
    def create_date(self):
        """Gets the create_date of this AnalyticsUser.  # noqa: E501


        :return: The create_date of this AnalyticsUser.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this AnalyticsUser.


        :param create_date: The create_date of this AnalyticsUser.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def disabled(self):
        """Gets the disabled of this AnalyticsUser.  # noqa: E501


        :return: The disabled of this AnalyticsUser.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this AnalyticsUser.


        :param disabled: The disabled of this AnalyticsUser.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def email(self):
        """Gets the email of this AnalyticsUser.  # noqa: E501


        :return: The email of this AnalyticsUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AnalyticsUser.


        :param email: The email of this AnalyticsUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this AnalyticsUser.  # noqa: E501


        :return: The first_name of this AnalyticsUser.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AnalyticsUser.


        :param first_name: The first_name of this AnalyticsUser.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def full_name(self):
        """Gets the full_name of this AnalyticsUser.  # noqa: E501


        :return: The full_name of this AnalyticsUser.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this AnalyticsUser.


        :param full_name: The full_name of this AnalyticsUser.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def ims_user_id(self):
        """Gets the ims_user_id of this AnalyticsUser.  # noqa: E501


        :return: The ims_user_id of this AnalyticsUser.  # noqa: E501
        :rtype: str
        """
        return self._ims_user_id

    @ims_user_id.setter
    def ims_user_id(self, ims_user_id):
        """Sets the ims_user_id of this AnalyticsUser.


        :param ims_user_id: The ims_user_id of this AnalyticsUser.  # noqa: E501
        :type: str
        """

        self._ims_user_id = ims_user_id

    @property
    def last_name(self):
        """Gets the last_name of this AnalyticsUser.  # noqa: E501


        :return: The last_name of this AnalyticsUser.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AnalyticsUser.


        :param last_name: The last_name of this AnalyticsUser.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def last_access(self):
        """Gets the last_access of this AnalyticsUser.  # noqa: E501


        :return: The last_access of this AnalyticsUser.  # noqa: E501
        :rtype: datetime
        """
        return self._last_access

    @last_access.setter
    def last_access(self, last_access):
        """Sets the last_access of this AnalyticsUser.


        :param last_access: The last_access of this AnalyticsUser.  # noqa: E501
        :type: datetime
        """

        self._last_access = last_access

    @property
    def phone_number(self):
        """Gets the phone_number of this AnalyticsUser.  # noqa: E501


        :return: The phone_number of this AnalyticsUser.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this AnalyticsUser.


        :param phone_number: The phone_number of this AnalyticsUser.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def temp_login_end(self):
        """Gets the temp_login_end of this AnalyticsUser.  # noqa: E501


        :return: The temp_login_end of this AnalyticsUser.  # noqa: E501
        :rtype: datetime
        """
        return self._temp_login_end

    @temp_login_end.setter
    def temp_login_end(self, temp_login_end):
        """Sets the temp_login_end of this AnalyticsUser.


        :param temp_login_end: The temp_login_end of this AnalyticsUser.  # noqa: E501
        :type: datetime
        """

        self._temp_login_end = temp_login_end

    @property
    def title(self):
        """Gets the title of this AnalyticsUser.  # noqa: E501


        :return: The title of this AnalyticsUser.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AnalyticsUser.


        :param title: The title of this AnalyticsUser.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
