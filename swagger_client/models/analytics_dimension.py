# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsDimension(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'name': 'str',
        'type': 'str',
        'category': 'str',
        'categories': 'list[str]',
        'support': 'list[str]',
        'pathable': 'bool',
        'parent': 'str',
        'extra_title_info': 'str',
        'segmentable': 'bool',
        'reportable': 'list[str]',
        'description': 'str',
        'allowed_for_reporting': 'bool',
        'none_settings': 'NoneSettings',
        'tags': 'list[Tag]'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'name': 'name',
        'type': 'type',
        'category': 'category',
        'categories': 'categories',
        'support': 'support',
        'pathable': 'pathable',
        'parent': 'parent',
        'extra_title_info': 'extraTitleInfo',
        'segmentable': 'segmentable',
        'reportable': 'reportable',
        'description': 'description',
        'allowed_for_reporting': 'allowedForReporting',
        'none_settings': 'noneSettings',
        'tags': 'tags'
    }

    def __init__(self, id=None, title=None, name=None, type=None, category=None, categories=None, support=None, pathable=None, parent=None, extra_title_info=None, segmentable=None, reportable=None, description=None, allowed_for_reporting=None, none_settings=None, tags=None):  # noqa: E501
        """AnalyticsDimension - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._name = None
        self._type = None
        self._category = None
        self._categories = None
        self._support = None
        self._pathable = None
        self._parent = None
        self._extra_title_info = None
        self._segmentable = None
        self._reportable = None
        self._description = None
        self._allowed_for_reporting = None
        self._none_settings = None
        self._tags = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if category is not None:
            self.category = category
        if categories is not None:
            self.categories = categories
        if support is not None:
            self.support = support
        if pathable is not None:
            self.pathable = pathable
        if parent is not None:
            self.parent = parent
        if extra_title_info is not None:
            self.extra_title_info = extra_title_info
        if segmentable is not None:
            self.segmentable = segmentable
        if reportable is not None:
            self.reportable = reportable
        if description is not None:
            self.description = description
        if allowed_for_reporting is not None:
            self.allowed_for_reporting = allowed_for_reporting
        if none_settings is not None:
            self.none_settings = none_settings
        if tags is not None:
            self.tags = tags

    @property
    def id(self):
        """Gets the id of this AnalyticsDimension.  # noqa: E501


        :return: The id of this AnalyticsDimension.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnalyticsDimension.


        :param id: The id of this AnalyticsDimension.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this AnalyticsDimension.  # noqa: E501


        :return: The title of this AnalyticsDimension.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AnalyticsDimension.


        :param title: The title of this AnalyticsDimension.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def name(self):
        """Gets the name of this AnalyticsDimension.  # noqa: E501


        :return: The name of this AnalyticsDimension.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalyticsDimension.


        :param name: The name of this AnalyticsDimension.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this AnalyticsDimension.  # noqa: E501


        :return: The type of this AnalyticsDimension.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AnalyticsDimension.


        :param type: The type of this AnalyticsDimension.  # noqa: E501
        :type: str
        """
        allowed_values = ["STRING", "INT", "DECIMAL", "CURRENCY", "PERCENT", "TIME", "ENUM", "ORDERED_ENUM"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def category(self):
        """Gets the category of this AnalyticsDimension.  # noqa: E501


        :return: The category of this AnalyticsDimension.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AnalyticsDimension.


        :param category: The category of this AnalyticsDimension.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def categories(self):
        """Gets the categories of this AnalyticsDimension.  # noqa: E501


        :return: The categories of this AnalyticsDimension.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this AnalyticsDimension.


        :param categories: The categories of this AnalyticsDimension.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def support(self):
        """Gets the support of this AnalyticsDimension.  # noqa: E501


        :return: The support of this AnalyticsDimension.  # noqa: E501
        :rtype: list[str]
        """
        return self._support

    @support.setter
    def support(self, support):
        """Sets the support of this AnalyticsDimension.


        :param support: The support of this AnalyticsDimension.  # noqa: E501
        :type: list[str]
        """

        self._support = support

    @property
    def pathable(self):
        """Gets the pathable of this AnalyticsDimension.  # noqa: E501


        :return: The pathable of this AnalyticsDimension.  # noqa: E501
        :rtype: bool
        """
        return self._pathable

    @pathable.setter
    def pathable(self, pathable):
        """Sets the pathable of this AnalyticsDimension.


        :param pathable: The pathable of this AnalyticsDimension.  # noqa: E501
        :type: bool
        """

        self._pathable = pathable

    @property
    def parent(self):
        """Gets the parent of this AnalyticsDimension.  # noqa: E501


        :return: The parent of this AnalyticsDimension.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this AnalyticsDimension.


        :param parent: The parent of this AnalyticsDimension.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def extra_title_info(self):
        """Gets the extra_title_info of this AnalyticsDimension.  # noqa: E501


        :return: The extra_title_info of this AnalyticsDimension.  # noqa: E501
        :rtype: str
        """
        return self._extra_title_info

    @extra_title_info.setter
    def extra_title_info(self, extra_title_info):
        """Sets the extra_title_info of this AnalyticsDimension.


        :param extra_title_info: The extra_title_info of this AnalyticsDimension.  # noqa: E501
        :type: str
        """

        self._extra_title_info = extra_title_info

    @property
    def segmentable(self):
        """Gets the segmentable of this AnalyticsDimension.  # noqa: E501


        :return: The segmentable of this AnalyticsDimension.  # noqa: E501
        :rtype: bool
        """
        return self._segmentable

    @segmentable.setter
    def segmentable(self, segmentable):
        """Sets the segmentable of this AnalyticsDimension.


        :param segmentable: The segmentable of this AnalyticsDimension.  # noqa: E501
        :type: bool
        """

        self._segmentable = segmentable

    @property
    def reportable(self):
        """Gets the reportable of this AnalyticsDimension.  # noqa: E501


        :return: The reportable of this AnalyticsDimension.  # noqa: E501
        :rtype: list[str]
        """
        return self._reportable

    @reportable.setter
    def reportable(self, reportable):
        """Sets the reportable of this AnalyticsDimension.


        :param reportable: The reportable of this AnalyticsDimension.  # noqa: E501
        :type: list[str]
        """

        self._reportable = reportable

    @property
    def description(self):
        """Gets the description of this AnalyticsDimension.  # noqa: E501


        :return: The description of this AnalyticsDimension.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AnalyticsDimension.


        :param description: The description of this AnalyticsDimension.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def allowed_for_reporting(self):
        """Gets the allowed_for_reporting of this AnalyticsDimension.  # noqa: E501


        :return: The allowed_for_reporting of this AnalyticsDimension.  # noqa: E501
        :rtype: bool
        """
        return self._allowed_for_reporting

    @allowed_for_reporting.setter
    def allowed_for_reporting(self, allowed_for_reporting):
        """Sets the allowed_for_reporting of this AnalyticsDimension.


        :param allowed_for_reporting: The allowed_for_reporting of this AnalyticsDimension.  # noqa: E501
        :type: bool
        """

        self._allowed_for_reporting = allowed_for_reporting

    @property
    def none_settings(self):
        """Gets the none_settings of this AnalyticsDimension.  # noqa: E501


        :return: The none_settings of this AnalyticsDimension.  # noqa: E501
        :rtype: NoneSettings
        """
        return self._none_settings

    @none_settings.setter
    def none_settings(self, none_settings):
        """Sets the none_settings of this AnalyticsDimension.


        :param none_settings: The none_settings of this AnalyticsDimension.  # noqa: E501
        :type: NoneSettings
        """

        self._none_settings = none_settings

    @property
    def tags(self):
        """Gets the tags of this AnalyticsDimension.  # noqa: E501


        :return: The tags of this AnalyticsDimension.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AnalyticsDimension.


        :param tags: The tags of this AnalyticsDimension.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsDimension, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsDimension):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
