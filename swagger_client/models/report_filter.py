# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'dimension': 'str',
        'item_id': 'str',
        'item_ids': 'list[str]',
        'segment_id': 'str',
        'segment_definition': 'dict(str, object)',
        'date_range': 'str',
        'exclude_item_ids': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'dimension': 'dimension',
        'item_id': 'itemId',
        'item_ids': 'itemIds',
        'segment_id': 'segmentId',
        'segment_definition': 'segmentDefinition',
        'date_range': 'dateRange',
        'exclude_item_ids': 'excludeItemIds'
    }

    def __init__(self, id=None, type=None, dimension=None, item_id=None, item_ids=None, segment_id=None, segment_definition=None, date_range=None, exclude_item_ids=None):  # noqa: E501
        """ReportFilter - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._dimension = None
        self._item_id = None
        self._item_ids = None
        self._segment_id = None
        self._segment_definition = None
        self._date_range = None
        self._exclude_item_ids = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if dimension is not None:
            self.dimension = dimension
        if item_id is not None:
            self.item_id = item_id
        if item_ids is not None:
            self.item_ids = item_ids
        if segment_id is not None:
            self.segment_id = segment_id
        if segment_definition is not None:
            self.segment_definition = segment_definition
        if date_range is not None:
            self.date_range = date_range
        if exclude_item_ids is not None:
            self.exclude_item_ids = exclude_item_ids

    @property
    def id(self):
        """Gets the id of this ReportFilter.  # noqa: E501


        :return: The id of this ReportFilter.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportFilter.


        :param id: The id of this ReportFilter.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this ReportFilter.  # noqa: E501


        :return: The type of this ReportFilter.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReportFilter.


        :param type: The type of this ReportFilter.  # noqa: E501
        :type: str
        """
        allowed_values = ["dateRange", "breakdown", "segment", "excludeItemIds"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def dimension(self):
        """Gets the dimension of this ReportFilter.  # noqa: E501


        :return: The dimension of this ReportFilter.  # noqa: E501
        :rtype: str
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this ReportFilter.


        :param dimension: The dimension of this ReportFilter.  # noqa: E501
        :type: str
        """

        self._dimension = dimension

    @property
    def item_id(self):
        """Gets the item_id of this ReportFilter.  # noqa: E501


        :return: The item_id of this ReportFilter.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this ReportFilter.


        :param item_id: The item_id of this ReportFilter.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def item_ids(self):
        """Gets the item_ids of this ReportFilter.  # noqa: E501


        :return: The item_ids of this ReportFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._item_ids

    @item_ids.setter
    def item_ids(self, item_ids):
        """Sets the item_ids of this ReportFilter.


        :param item_ids: The item_ids of this ReportFilter.  # noqa: E501
        :type: list[str]
        """

        self._item_ids = item_ids

    @property
    def segment_id(self):
        """Gets the segment_id of this ReportFilter.  # noqa: E501


        :return: The segment_id of this ReportFilter.  # noqa: E501
        :rtype: str
        """
        return self._segment_id

    @segment_id.setter
    def segment_id(self, segment_id):
        """Sets the segment_id of this ReportFilter.


        :param segment_id: The segment_id of this ReportFilter.  # noqa: E501
        :type: str
        """

        self._segment_id = segment_id

    @property
    def segment_definition(self):
        """Gets the segment_definition of this ReportFilter.  # noqa: E501


        :return: The segment_definition of this ReportFilter.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._segment_definition

    @segment_definition.setter
    def segment_definition(self, segment_definition):
        """Sets the segment_definition of this ReportFilter.


        :param segment_definition: The segment_definition of this ReportFilter.  # noqa: E501
        :type: dict(str, object)
        """

        self._segment_definition = segment_definition

    @property
    def date_range(self):
        """Gets the date_range of this ReportFilter.  # noqa: E501


        :return: The date_range of this ReportFilter.  # noqa: E501
        :rtype: str
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this ReportFilter.


        :param date_range: The date_range of this ReportFilter.  # noqa: E501
        :type: str
        """

        self._date_range = date_range

    @property
    def exclude_item_ids(self):
        """Gets the exclude_item_ids of this ReportFilter.  # noqa: E501


        :return: The exclude_item_ids of this ReportFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclude_item_ids

    @exclude_item_ids.setter
    def exclude_item_ids(self, exclude_item_ids):
        """Sets the exclude_item_ids of this ReportFilter.


        :param exclude_item_ids: The exclude_item_ids of this ReportFilter.  # noqa: E501
        :type: list[str]
        """

        self._exclude_item_ids = exclude_item_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
