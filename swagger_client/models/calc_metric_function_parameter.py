# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CalcMetricFunctionParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'func': 'str',
        'name': 'str',
        'type': 'str',
        'friendly_name_key': 'str',
        'desc_key': 'str',
        'friendly_name': 'str',
        'description': 'str',
        'default_value': 'object'
    }

    attribute_map = {
        'func': 'func',
        'name': 'name',
        'type': 'type',
        'friendly_name_key': 'friendlyNameKey',
        'desc_key': 'descKey',
        'friendly_name': 'friendlyName',
        'description': 'description',
        'default_value': 'default-value'
    }

    def __init__(self, func=None, name=None, type=None, friendly_name_key=None, desc_key=None, friendly_name=None, description=None, default_value=None):  # noqa: E501
        """CalcMetricFunctionParameter - a model defined in Swagger"""  # noqa: E501
        self._func = None
        self._name = None
        self._type = None
        self._friendly_name_key = None
        self._desc_key = None
        self._friendly_name = None
        self._description = None
        self._default_value = None
        self.discriminator = None
        if func is not None:
            self.func = func
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if friendly_name_key is not None:
            self.friendly_name_key = friendly_name_key
        if desc_key is not None:
            self.desc_key = desc_key
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if description is not None:
            self.description = description
        if default_value is not None:
            self.default_value = default_value

    @property
    def func(self):
        """Gets the func of this CalcMetricFunctionParameter.  # noqa: E501


        :return: The func of this CalcMetricFunctionParameter.  # noqa: E501
        :rtype: str
        """
        return self._func

    @func.setter
    def func(self, func):
        """Sets the func of this CalcMetricFunctionParameter.


        :param func: The func of this CalcMetricFunctionParameter.  # noqa: E501
        :type: str
        """

        self._func = func

    @property
    def name(self):
        """Gets the name of this CalcMetricFunctionParameter.  # noqa: E501


        :return: The name of this CalcMetricFunctionParameter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CalcMetricFunctionParameter.


        :param name: The name of this CalcMetricFunctionParameter.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this CalcMetricFunctionParameter.  # noqa: E501


        :return: The type of this CalcMetricFunctionParameter.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CalcMetricFunctionParameter.


        :param type: The type of this CalcMetricFunctionParameter.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def friendly_name_key(self):
        """Gets the friendly_name_key of this CalcMetricFunctionParameter.  # noqa: E501


        :return: The friendly_name_key of this CalcMetricFunctionParameter.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name_key

    @friendly_name_key.setter
    def friendly_name_key(self, friendly_name_key):
        """Sets the friendly_name_key of this CalcMetricFunctionParameter.


        :param friendly_name_key: The friendly_name_key of this CalcMetricFunctionParameter.  # noqa: E501
        :type: str
        """

        self._friendly_name_key = friendly_name_key

    @property
    def desc_key(self):
        """Gets the desc_key of this CalcMetricFunctionParameter.  # noqa: E501


        :return: The desc_key of this CalcMetricFunctionParameter.  # noqa: E501
        :rtype: str
        """
        return self._desc_key

    @desc_key.setter
    def desc_key(self, desc_key):
        """Sets the desc_key of this CalcMetricFunctionParameter.


        :param desc_key: The desc_key of this CalcMetricFunctionParameter.  # noqa: E501
        :type: str
        """

        self._desc_key = desc_key

    @property
    def friendly_name(self):
        """Gets the friendly_name of this CalcMetricFunctionParameter.  # noqa: E501


        :return: The friendly_name of this CalcMetricFunctionParameter.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this CalcMetricFunctionParameter.


        :param friendly_name: The friendly_name of this CalcMetricFunctionParameter.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def description(self):
        """Gets the description of this CalcMetricFunctionParameter.  # noqa: E501


        :return: The description of this CalcMetricFunctionParameter.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CalcMetricFunctionParameter.


        :param description: The description of this CalcMetricFunctionParameter.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def default_value(self):
        """Gets the default_value of this CalcMetricFunctionParameter.  # noqa: E501


        :return: The default_value of this CalcMetricFunctionParameter.  # noqa: E501
        :rtype: object
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this CalcMetricFunctionParameter.


        :param default_value: The default_value of this CalcMetricFunctionParameter.  # noqa: E501
        :type: object
        """

        self._default_value = default_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalcMetricFunctionParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalcMetricFunctionParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
