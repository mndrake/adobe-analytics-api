# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsSegmentDefinitionContainer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'str',
        'func': 'str',
        'pred': 'AnalyticsSegmentDefinitionContainerPred'
    }

    attribute_map = {
        'context': 'context',
        'func': 'func',
        'pred': 'pred'
    }

    def __init__(self, context=None, func=None, pred=None):  # noqa: E501
        """AnalyticsSegmentDefinitionContainer - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._func = None
        self._pred = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if func is not None:
            self.func = func
        if pred is not None:
            self.pred = pred

    @property
    def context(self):
        """Gets the context of this AnalyticsSegmentDefinitionContainer.  # noqa: E501


        :return: The context of this AnalyticsSegmentDefinitionContainer.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this AnalyticsSegmentDefinitionContainer.


        :param context: The context of this AnalyticsSegmentDefinitionContainer.  # noqa: E501
        :type: str
        """

        self._context = context

    @property
    def func(self):
        """Gets the func of this AnalyticsSegmentDefinitionContainer.  # noqa: E501


        :return: The func of this AnalyticsSegmentDefinitionContainer.  # noqa: E501
        :rtype: str
        """
        return self._func

    @func.setter
    def func(self, func):
        """Sets the func of this AnalyticsSegmentDefinitionContainer.


        :param func: The func of this AnalyticsSegmentDefinitionContainer.  # noqa: E501
        :type: str
        """

        self._func = func

    @property
    def pred(self):
        """Gets the pred of this AnalyticsSegmentDefinitionContainer.  # noqa: E501


        :return: The pred of this AnalyticsSegmentDefinitionContainer.  # noqa: E501
        :rtype: AnalyticsSegmentDefinitionContainerPred
        """
        return self._pred

    @pred.setter
    def pred(self, pred):
        """Sets the pred of this AnalyticsSegmentDefinitionContainer.


        :param pred: The pred of this AnalyticsSegmentDefinitionContainer.  # noqa: E501
        :type: AnalyticsSegmentDefinitionContainerPred
        """

        self._pred = pred

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsSegmentDefinitionContainer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsSegmentDefinitionContainer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
