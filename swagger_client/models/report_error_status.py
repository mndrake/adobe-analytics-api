# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportErrorStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_code': 'str',
        'error_description': 'str',
        'error_id': 'str',
        'error_details': 'dict(str, object)',
        'root_cause_service': 'str'
    }

    attribute_map = {
        'error_code': 'errorCode',
        'error_description': 'errorDescription',
        'error_id': 'errorId',
        'error_details': 'errorDetails',
        'root_cause_service': 'rootCauseService'
    }

    def __init__(self, error_code=None, error_description=None, error_id=None, error_details=None, root_cause_service=None):  # noqa: E501
        """ReportErrorStatus - a model defined in Swagger"""  # noqa: E501
        self._error_code = None
        self._error_description = None
        self._error_id = None
        self._error_details = None
        self._root_cause_service = None
        self.discriminator = None
        if error_code is not None:
            self.error_code = error_code
        if error_description is not None:
            self.error_description = error_description
        if error_id is not None:
            self.error_id = error_id
        if error_details is not None:
            self.error_details = error_details
        if root_cause_service is not None:
            self.root_cause_service = root_cause_service

    @property
    def error_code(self):
        """Gets the error_code of this ReportErrorStatus.  # noqa: E501


        :return: The error_code of this ReportErrorStatus.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ReportErrorStatus.


        :param error_code: The error_code of this ReportErrorStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["invalid_segment_ids_found", "invalid_metric_access", "method_not_allowed", "resource_conflict", "invalid_access", "resource_temporarily_unavailable", "external_api_failure", "aam_failure", "resource_already_exists", "invalid_state", "invalid_json_input", "invalid_parameters", "invalid_dimension_access", "unsupported_data_type", "resource_not_found", "insufficient_access", "health_check_error", "invalid_data", "unexpected_error", "external_api_error", "unsupported_resource", "io_error", "invalid_request", "invalid_client_id", "unauthorized", "authorization_error", "invalid_token", "insufficient_scope", "bluecoat_unauthorized"]  # noqa: E501
        if error_code not in allowed_values:
            raise ValueError(
                "Invalid value for `error_code` ({0}), must be one of {1}"  # noqa: E501
                .format(error_code, allowed_values)
            )

        self._error_code = error_code

    @property
    def error_description(self):
        """Gets the error_description of this ReportErrorStatus.  # noqa: E501


        :return: The error_description of this ReportErrorStatus.  # noqa: E501
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description):
        """Sets the error_description of this ReportErrorStatus.


        :param error_description: The error_description of this ReportErrorStatus.  # noqa: E501
        :type: str
        """

        self._error_description = error_description

    @property
    def error_id(self):
        """Gets the error_id of this ReportErrorStatus.  # noqa: E501


        :return: The error_id of this ReportErrorStatus.  # noqa: E501
        :rtype: str
        """
        return self._error_id

    @error_id.setter
    def error_id(self, error_id):
        """Sets the error_id of this ReportErrorStatus.


        :param error_id: The error_id of this ReportErrorStatus.  # noqa: E501
        :type: str
        """

        self._error_id = error_id

    @property
    def error_details(self):
        """Gets the error_details of this ReportErrorStatus.  # noqa: E501


        :return: The error_details of this ReportErrorStatus.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this ReportErrorStatus.


        :param error_details: The error_details of this ReportErrorStatus.  # noqa: E501
        :type: dict(str, object)
        """

        self._error_details = error_details

    @property
    def root_cause_service(self):
        """Gets the root_cause_service of this ReportErrorStatus.  # noqa: E501


        :return: The root_cause_service of this ReportErrorStatus.  # noqa: E501
        :rtype: str
        """
        return self._root_cause_service

    @root_cause_service.setter
    def root_cause_service(self, root_cause_service):
        """Sets the root_cause_service of this ReportErrorStatus.


        :param root_cause_service: The root_cause_service of this ReportErrorStatus.  # noqa: E501
        :type: str
        """

        self._root_cause_service = root_cause_service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportErrorStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportErrorStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
