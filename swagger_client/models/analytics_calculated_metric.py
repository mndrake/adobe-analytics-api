# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsCalculatedMetric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'rsid': 'str',
        'report_suite_name': 'str',
        'owner': 'Owner',
        'polarity': 'str',
        'precision': 'int',
        'type': 'str',
        'definition': 'CalculatedMetricDef',
        'categories': 'list[str]',
        'tags': 'list[Tag]',
        'site_title': 'str',
        'modified': 'datetime',
        'created': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'rsid': 'rsid',
        'report_suite_name': 'reportSuiteName',
        'owner': 'owner',
        'polarity': 'polarity',
        'precision': 'precision',
        'type': 'type',
        'definition': 'definition',
        'categories': 'categories',
        'tags': 'tags',
        'site_title': 'siteTitle',
        'modified': 'modified',
        'created': 'created'
    }

    def __init__(self, id=None, name=None, description=None, rsid=None, report_suite_name=None, owner=None, polarity=None, precision=None, type=None, definition=None, categories=None, tags=None, site_title=None, modified=None, created=None):  # noqa: E501
        """AnalyticsCalculatedMetric - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._rsid = None
        self._report_suite_name = None
        self._owner = None
        self._polarity = None
        self._precision = None
        self._type = None
        self._definition = None
        self._categories = None
        self._tags = None
        self._site_title = None
        self._modified = None
        self._created = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if rsid is not None:
            self.rsid = rsid
        if report_suite_name is not None:
            self.report_suite_name = report_suite_name
        if owner is not None:
            self.owner = owner
        if polarity is not None:
            self.polarity = polarity
        if precision is not None:
            self.precision = precision
        if type is not None:
            self.type = type
        self.definition = definition
        if categories is not None:
            self.categories = categories
        if tags is not None:
            self.tags = tags
        if site_title is not None:
            self.site_title = site_title
        if modified is not None:
            self.modified = modified
        if created is not None:
            self.created = created

    @property
    def id(self):
        """Gets the id of this AnalyticsCalculatedMetric.  # noqa: E501

        System generated id  # noqa: E501

        :return: The id of this AnalyticsCalculatedMetric.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnalyticsCalculatedMetric.

        System generated id  # noqa: E501

        :param id: The id of this AnalyticsCalculatedMetric.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AnalyticsCalculatedMetric.  # noqa: E501


        :return: The name of this AnalyticsCalculatedMetric.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalyticsCalculatedMetric.


        :param name: The name of this AnalyticsCalculatedMetric.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AnalyticsCalculatedMetric.  # noqa: E501


        :return: The description of this AnalyticsCalculatedMetric.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AnalyticsCalculatedMetric.


        :param description: The description of this AnalyticsCalculatedMetric.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def rsid(self):
        """Gets the rsid of this AnalyticsCalculatedMetric.  # noqa: E501

        The report suite id for which the component was created/updated  # noqa: E501

        :return: The rsid of this AnalyticsCalculatedMetric.  # noqa: E501
        :rtype: str
        """
        return self._rsid

    @rsid.setter
    def rsid(self, rsid):
        """Sets the rsid of this AnalyticsCalculatedMetric.

        The report suite id for which the component was created/updated  # noqa: E501

        :param rsid: The rsid of this AnalyticsCalculatedMetric.  # noqa: E501
        :type: str
        """

        self._rsid = rsid

    @property
    def report_suite_name(self):
        """Gets the report_suite_name of this AnalyticsCalculatedMetric.  # noqa: E501

        The report suite name for which the component was created/updated  # noqa: E501

        :return: The report_suite_name of this AnalyticsCalculatedMetric.  # noqa: E501
        :rtype: str
        """
        return self._report_suite_name

    @report_suite_name.setter
    def report_suite_name(self, report_suite_name):
        """Sets the report_suite_name of this AnalyticsCalculatedMetric.

        The report suite name for which the component was created/updated  # noqa: E501

        :param report_suite_name: The report_suite_name of this AnalyticsCalculatedMetric.  # noqa: E501
        :type: str
        """

        self._report_suite_name = report_suite_name

    @property
    def owner(self):
        """Gets the owner of this AnalyticsCalculatedMetric.  # noqa: E501


        :return: The owner of this AnalyticsCalculatedMetric.  # noqa: E501
        :rtype: Owner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this AnalyticsCalculatedMetric.


        :param owner: The owner of this AnalyticsCalculatedMetric.  # noqa: E501
        :type: Owner
        """

        self._owner = owner

    @property
    def polarity(self):
        """Gets the polarity of this AnalyticsCalculatedMetric.  # noqa: E501

        Set metric polarity, which indicates whether it's good or bad if a given metric goes up. Default=positive  # noqa: E501

        :return: The polarity of this AnalyticsCalculatedMetric.  # noqa: E501
        :rtype: str
        """
        return self._polarity

    @polarity.setter
    def polarity(self, polarity):
        """Sets the polarity of this AnalyticsCalculatedMetric.

        Set metric polarity, which indicates whether it's good or bad if a given metric goes up. Default=positive  # noqa: E501

        :param polarity: The polarity of this AnalyticsCalculatedMetric.  # noqa: E501
        :type: str
        """
        allowed_values = ["positive", "negative"]  # noqa: E501
        if polarity not in allowed_values:
            raise ValueError(
                "Invalid value for `polarity` ({0}), must be one of {1}"  # noqa: E501
                .format(polarity, allowed_values)
            )

        self._polarity = polarity

    @property
    def precision(self):
        """Gets the precision of this AnalyticsCalculatedMetric.  # noqa: E501

        Number of decimal places to include in calculated metric result  # noqa: E501

        :return: The precision of this AnalyticsCalculatedMetric.  # noqa: E501
        :rtype: int
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this AnalyticsCalculatedMetric.

        Number of decimal places to include in calculated metric result  # noqa: E501

        :param precision: The precision of this AnalyticsCalculatedMetric.  # noqa: E501
        :type: int
        """

        self._precision = precision

    @property
    def type(self):
        """Gets the type of this AnalyticsCalculatedMetric.  # noqa: E501


        :return: The type of this AnalyticsCalculatedMetric.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AnalyticsCalculatedMetric.


        :param type: The type of this AnalyticsCalculatedMetric.  # noqa: E501
        :type: str
        """
        allowed_values = ["CURRENCY", "TIME", "DECIMAL", "PERCENT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def definition(self):
        """Gets the definition of this AnalyticsCalculatedMetric.  # noqa: E501


        :return: The definition of this AnalyticsCalculatedMetric.  # noqa: E501
        :rtype: CalculatedMetricDef
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this AnalyticsCalculatedMetric.


        :param definition: The definition of this AnalyticsCalculatedMetric.  # noqa: E501
        :type: CalculatedMetricDef
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")  # noqa: E501

        self._definition = definition

    @property
    def categories(self):
        """Gets the categories of this AnalyticsCalculatedMetric.  # noqa: E501


        :return: The categories of this AnalyticsCalculatedMetric.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this AnalyticsCalculatedMetric.


        :param categories: The categories of this AnalyticsCalculatedMetric.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def tags(self):
        """Gets the tags of this AnalyticsCalculatedMetric.  # noqa: E501


        :return: The tags of this AnalyticsCalculatedMetric.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AnalyticsCalculatedMetric.


        :param tags: The tags of this AnalyticsCalculatedMetric.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def site_title(self):
        """Gets the site_title of this AnalyticsCalculatedMetric.  # noqa: E501


        :return: The site_title of this AnalyticsCalculatedMetric.  # noqa: E501
        :rtype: str
        """
        return self._site_title

    @site_title.setter
    def site_title(self, site_title):
        """Sets the site_title of this AnalyticsCalculatedMetric.


        :param site_title: The site_title of this AnalyticsCalculatedMetric.  # noqa: E501
        :type: str
        """

        self._site_title = site_title

    @property
    def modified(self):
        """Gets the modified of this AnalyticsCalculatedMetric.  # noqa: E501


        :return: The modified of this AnalyticsCalculatedMetric.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this AnalyticsCalculatedMetric.


        :param modified: The modified of this AnalyticsCalculatedMetric.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def created(self):
        """Gets the created of this AnalyticsCalculatedMetric.  # noqa: E501

        Calculated metric creation date  # noqa: E501

        :return: The created of this AnalyticsCalculatedMetric.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AnalyticsCalculatedMetric.

        Calculated metric creation date  # noqa: E501

        :param created: The created of this AnalyticsCalculatedMetric.  # noqa: E501
        :type: datetime
        """

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsCalculatedMetric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsCalculatedMetric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
