# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SuiteCollectionItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'timezone_zone_info': 'str',
        'parent_rsid': 'str',
        'collection_item_type': 'str',
        'currency': 'str',
        'calendar_type': 'CalendarType',
        'rsid': 'str'
    }

    attribute_map = {
        'name': 'name',
        'timezone_zone_info': 'timezoneZoneInfo',
        'parent_rsid': 'parentRsid',
        'collection_item_type': 'collectionItemType',
        'currency': 'currency',
        'calendar_type': 'calendarType',
        'rsid': 'rsid'
    }

    def __init__(self, name=None, timezone_zone_info=None, parent_rsid=None, collection_item_type=None, currency=None, calendar_type=None, rsid=None):  # noqa: E501
        """SuiteCollectionItem - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._timezone_zone_info = None
        self._parent_rsid = None
        self._collection_item_type = None
        self._currency = None
        self._calendar_type = None
        self._rsid = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if timezone_zone_info is not None:
            self.timezone_zone_info = timezone_zone_info
        if parent_rsid is not None:
            self.parent_rsid = parent_rsid
        if collection_item_type is not None:
            self.collection_item_type = collection_item_type
        if currency is not None:
            self.currency = currency
        if calendar_type is not None:
            self.calendar_type = calendar_type
        if rsid is not None:
            self.rsid = rsid

    @property
    def name(self):
        """Gets the name of this SuiteCollectionItem.  # noqa: E501


        :return: The name of this SuiteCollectionItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SuiteCollectionItem.


        :param name: The name of this SuiteCollectionItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def timezone_zone_info(self):
        """Gets the timezone_zone_info of this SuiteCollectionItem.  # noqa: E501

        Suite friendly timezone name  # noqa: E501

        :return: The timezone_zone_info of this SuiteCollectionItem.  # noqa: E501
        :rtype: str
        """
        return self._timezone_zone_info

    @timezone_zone_info.setter
    def timezone_zone_info(self, timezone_zone_info):
        """Sets the timezone_zone_info of this SuiteCollectionItem.

        Suite friendly timezone name  # noqa: E501

        :param timezone_zone_info: The timezone_zone_info of this SuiteCollectionItem.  # noqa: E501
        :type: str
        """

        self._timezone_zone_info = timezone_zone_info

    @property
    def parent_rsid(self):
        """Gets the parent_rsid of this SuiteCollectionItem.  # noqa: E501

        Parent report suite id for virtual report suite  # noqa: E501

        :return: The parent_rsid of this SuiteCollectionItem.  # noqa: E501
        :rtype: str
        """
        return self._parent_rsid

    @parent_rsid.setter
    def parent_rsid(self, parent_rsid):
        """Sets the parent_rsid of this SuiteCollectionItem.

        Parent report suite id for virtual report suite  # noqa: E501

        :param parent_rsid: The parent_rsid of this SuiteCollectionItem.  # noqa: E501
        :type: str
        """

        self._parent_rsid = parent_rsid

    @property
    def collection_item_type(self):
        """Gets the collection_item_type of this SuiteCollectionItem.  # noqa: E501

        Suite type  # noqa: E501

        :return: The collection_item_type of this SuiteCollectionItem.  # noqa: E501
        :rtype: str
        """
        return self._collection_item_type

    @collection_item_type.setter
    def collection_item_type(self, collection_item_type):
        """Sets the collection_item_type of this SuiteCollectionItem.

        Suite type  # noqa: E501

        :param collection_item_type: The collection_item_type of this SuiteCollectionItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["reportsuite", "virtualreportsuite"]  # noqa: E501
        if collection_item_type not in allowed_values:
            raise ValueError(
                "Invalid value for `collection_item_type` ({0}), must be one of {1}"  # noqa: E501
                .format(collection_item_type, allowed_values)
            )

        self._collection_item_type = collection_item_type

    @property
    def currency(self):
        """Gets the currency of this SuiteCollectionItem.  # noqa: E501


        :return: The currency of this SuiteCollectionItem.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SuiteCollectionItem.


        :param currency: The currency of this SuiteCollectionItem.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def calendar_type(self):
        """Gets the calendar_type of this SuiteCollectionItem.  # noqa: E501


        :return: The calendar_type of this SuiteCollectionItem.  # noqa: E501
        :rtype: CalendarType
        """
        return self._calendar_type

    @calendar_type.setter
    def calendar_type(self, calendar_type):
        """Sets the calendar_type of this SuiteCollectionItem.


        :param calendar_type: The calendar_type of this SuiteCollectionItem.  # noqa: E501
        :type: CalendarType
        """

        self._calendar_type = calendar_type

    @property
    def rsid(self):
        """Gets the rsid of this SuiteCollectionItem.  # noqa: E501


        :return: The rsid of this SuiteCollectionItem.  # noqa: E501
        :rtype: str
        """
        return self._rsid

    @rsid.setter
    def rsid(self, rsid):
        """Sets the rsid of this SuiteCollectionItem.


        :param rsid: The rsid of this SuiteCollectionItem.  # noqa: E501
        :type: str
        """

        self._rsid = rsid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SuiteCollectionItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SuiteCollectionItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
