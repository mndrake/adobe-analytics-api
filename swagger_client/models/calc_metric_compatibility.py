# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CalcMetricCompatibility(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'valid': 'bool',
        'message': 'str',
        'identity_metrics': 'list[IdentityMetric]',
        'identity_dimensions': 'list[str]',
        'segments': 'list[str]',
        'functions': 'list[str]',
        'validator_version': 'str',
        'supported_products': 'list[str]',
        'supported_schema': 'list[str]'
    }

    attribute_map = {
        'valid': 'valid',
        'message': 'message',
        'identity_metrics': 'identityMetrics',
        'identity_dimensions': 'identityDimensions',
        'segments': 'segments',
        'functions': 'functions',
        'validator_version': 'validator_version',
        'supported_products': 'supported_products',
        'supported_schema': 'supported_schema'
    }

    def __init__(self, valid=None, message=None, identity_metrics=None, identity_dimensions=None, segments=None, functions=None, validator_version=None, supported_products=None, supported_schema=None):  # noqa: E501
        """CalcMetricCompatibility - a model defined in Swagger"""  # noqa: E501
        self._valid = None
        self._message = None
        self._identity_metrics = None
        self._identity_dimensions = None
        self._segments = None
        self._functions = None
        self._validator_version = None
        self._supported_products = None
        self._supported_schema = None
        self.discriminator = None
        if valid is not None:
            self.valid = valid
        if message is not None:
            self.message = message
        if identity_metrics is not None:
            self.identity_metrics = identity_metrics
        if identity_dimensions is not None:
            self.identity_dimensions = identity_dimensions
        if segments is not None:
            self.segments = segments
        if functions is not None:
            self.functions = functions
        if validator_version is not None:
            self.validator_version = validator_version
        if supported_products is not None:
            self.supported_products = supported_products
        if supported_schema is not None:
            self.supported_schema = supported_schema

    @property
    def valid(self):
        """Gets the valid of this CalcMetricCompatibility.  # noqa: E501


        :return: The valid of this CalcMetricCompatibility.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this CalcMetricCompatibility.


        :param valid: The valid of this CalcMetricCompatibility.  # noqa: E501
        :type: bool
        """

        self._valid = valid

    @property
    def message(self):
        """Gets the message of this CalcMetricCompatibility.  # noqa: E501


        :return: The message of this CalcMetricCompatibility.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CalcMetricCompatibility.


        :param message: The message of this CalcMetricCompatibility.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def identity_metrics(self):
        """Gets the identity_metrics of this CalcMetricCompatibility.  # noqa: E501


        :return: The identity_metrics of this CalcMetricCompatibility.  # noqa: E501
        :rtype: list[IdentityMetric]
        """
        return self._identity_metrics

    @identity_metrics.setter
    def identity_metrics(self, identity_metrics):
        """Sets the identity_metrics of this CalcMetricCompatibility.


        :param identity_metrics: The identity_metrics of this CalcMetricCompatibility.  # noqa: E501
        :type: list[IdentityMetric]
        """

        self._identity_metrics = identity_metrics

    @property
    def identity_dimensions(self):
        """Gets the identity_dimensions of this CalcMetricCompatibility.  # noqa: E501


        :return: The identity_dimensions of this CalcMetricCompatibility.  # noqa: E501
        :rtype: list[str]
        """
        return self._identity_dimensions

    @identity_dimensions.setter
    def identity_dimensions(self, identity_dimensions):
        """Sets the identity_dimensions of this CalcMetricCompatibility.


        :param identity_dimensions: The identity_dimensions of this CalcMetricCompatibility.  # noqa: E501
        :type: list[str]
        """

        self._identity_dimensions = identity_dimensions

    @property
    def segments(self):
        """Gets the segments of this CalcMetricCompatibility.  # noqa: E501


        :return: The segments of this CalcMetricCompatibility.  # noqa: E501
        :rtype: list[str]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this CalcMetricCompatibility.


        :param segments: The segments of this CalcMetricCompatibility.  # noqa: E501
        :type: list[str]
        """

        self._segments = segments

    @property
    def functions(self):
        """Gets the functions of this CalcMetricCompatibility.  # noqa: E501


        :return: The functions of this CalcMetricCompatibility.  # noqa: E501
        :rtype: list[str]
        """
        return self._functions

    @functions.setter
    def functions(self, functions):
        """Sets the functions of this CalcMetricCompatibility.


        :param functions: The functions of this CalcMetricCompatibility.  # noqa: E501
        :type: list[str]
        """

        self._functions = functions

    @property
    def validator_version(self):
        """Gets the validator_version of this CalcMetricCompatibility.  # noqa: E501


        :return: The validator_version of this CalcMetricCompatibility.  # noqa: E501
        :rtype: str
        """
        return self._validator_version

    @validator_version.setter
    def validator_version(self, validator_version):
        """Sets the validator_version of this CalcMetricCompatibility.


        :param validator_version: The validator_version of this CalcMetricCompatibility.  # noqa: E501
        :type: str
        """

        self._validator_version = validator_version

    @property
    def supported_products(self):
        """Gets the supported_products of this CalcMetricCompatibility.  # noqa: E501


        :return: The supported_products of this CalcMetricCompatibility.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_products

    @supported_products.setter
    def supported_products(self, supported_products):
        """Sets the supported_products of this CalcMetricCompatibility.


        :param supported_products: The supported_products of this CalcMetricCompatibility.  # noqa: E501
        :type: list[str]
        """

        self._supported_products = supported_products

    @property
    def supported_schema(self):
        """Gets the supported_schema of this CalcMetricCompatibility.  # noqa: E501


        :return: The supported_schema of this CalcMetricCompatibility.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_schema

    @supported_schema.setter
    def supported_schema(self, supported_schema):
        """Sets the supported_schema of this CalcMetricCompatibility.


        :param supported_schema: The supported_schema of this CalcMetricCompatibility.  # noqa: E501
        :type: list[str]
        """

        self._supported_schema = supported_schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalcMetricCompatibility, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalcMetricCompatibility):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
