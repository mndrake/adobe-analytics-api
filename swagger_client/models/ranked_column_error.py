# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RankedColumnError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_id': 'str',
        'error_code': 'str',
        'error_id': 'str',
        'error_description': 'str'
    }

    attribute_map = {
        'column_id': 'columnId',
        'error_code': 'errorCode',
        'error_id': 'errorId',
        'error_description': 'errorDescription'
    }

    def __init__(self, column_id=None, error_code=None, error_id=None, error_description=None):  # noqa: E501
        """RankedColumnError - a model defined in Swagger"""  # noqa: E501
        self._column_id = None
        self._error_code = None
        self._error_id = None
        self._error_description = None
        self.discriminator = None
        if column_id is not None:
            self.column_id = column_id
        if error_code is not None:
            self.error_code = error_code
        if error_id is not None:
            self.error_id = error_id
        if error_description is not None:
            self.error_description = error_description

    @property
    def column_id(self):
        """Gets the column_id of this RankedColumnError.  # noqa: E501


        :return: The column_id of this RankedColumnError.  # noqa: E501
        :rtype: str
        """
        return self._column_id

    @column_id.setter
    def column_id(self, column_id):
        """Sets the column_id of this RankedColumnError.


        :param column_id: The column_id of this RankedColumnError.  # noqa: E501
        :type: str
        """

        self._column_id = column_id

    @property
    def error_code(self):
        """Gets the error_code of this RankedColumnError.  # noqa: E501


        :return: The error_code of this RankedColumnError.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this RankedColumnError.


        :param error_code: The error_code of this RankedColumnError.  # noqa: E501
        :type: str
        """
        allowed_values = ["unauthorized_metric", "unauthorized_dimension", "unauthorized_dimension_global", "anomaly_detection_failure_unexpected_item_count", "anomaly_detection_failure_tsa_service", "not_enabled_metric", "not_enabled_dimension", "not_enabled_dimension_global"]  # noqa: E501
        if error_code not in allowed_values:
            raise ValueError(
                "Invalid value for `error_code` ({0}), must be one of {1}"  # noqa: E501
                .format(error_code, allowed_values)
            )

        self._error_code = error_code

    @property
    def error_id(self):
        """Gets the error_id of this RankedColumnError.  # noqa: E501


        :return: The error_id of this RankedColumnError.  # noqa: E501
        :rtype: str
        """
        return self._error_id

    @error_id.setter
    def error_id(self, error_id):
        """Sets the error_id of this RankedColumnError.


        :param error_id: The error_id of this RankedColumnError.  # noqa: E501
        :type: str
        """

        self._error_id = error_id

    @property
    def error_description(self):
        """Gets the error_description of this RankedColumnError.  # noqa: E501


        :return: The error_description of this RankedColumnError.  # noqa: E501
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description):
        """Sets the error_description of this RankedColumnError.


        :param error_description: The error_description of this RankedColumnError.  # noqa: E501
        :type: str
        """

        self._error_description = error_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RankedColumnError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RankedColumnError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
