# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CalcMetricFunctionDef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'func': 'str',
        'parameters': 'list[CalcMetricFunctionParameter]',
        'formula': 'dict(str, object)',
        'version': 'list[int]'
    }

    attribute_map = {
        'func': 'func',
        'parameters': 'parameters',
        'formula': 'formula',
        'version': 'version'
    }

    def __init__(self, func=None, parameters=None, formula=None, version=None):  # noqa: E501
        """CalcMetricFunctionDef - a model defined in Swagger"""  # noqa: E501
        self._func = None
        self._parameters = None
        self._formula = None
        self._version = None
        self.discriminator = None
        if func is not None:
            self.func = func
        if parameters is not None:
            self.parameters = parameters
        if formula is not None:
            self.formula = formula
        if version is not None:
            self.version = version

    @property
    def func(self):
        """Gets the func of this CalcMetricFunctionDef.  # noqa: E501


        :return: The func of this CalcMetricFunctionDef.  # noqa: E501
        :rtype: str
        """
        return self._func

    @func.setter
    def func(self, func):
        """Sets the func of this CalcMetricFunctionDef.


        :param func: The func of this CalcMetricFunctionDef.  # noqa: E501
        :type: str
        """

        self._func = func

    @property
    def parameters(self):
        """Gets the parameters of this CalcMetricFunctionDef.  # noqa: E501


        :return: The parameters of this CalcMetricFunctionDef.  # noqa: E501
        :rtype: list[CalcMetricFunctionParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CalcMetricFunctionDef.


        :param parameters: The parameters of this CalcMetricFunctionDef.  # noqa: E501
        :type: list[CalcMetricFunctionParameter]
        """

        self._parameters = parameters

    @property
    def formula(self):
        """Gets the formula of this CalcMetricFunctionDef.  # noqa: E501


        :return: The formula of this CalcMetricFunctionDef.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this CalcMetricFunctionDef.


        :param formula: The formula of this CalcMetricFunctionDef.  # noqa: E501
        :type: dict(str, object)
        """

        self._formula = formula

    @property
    def version(self):
        """Gets the version of this CalcMetricFunctionDef.  # noqa: E501


        :return: The version of this CalcMetricFunctionDef.  # noqa: E501
        :rtype: list[int]
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CalcMetricFunctionDef.


        :param version: The version of this CalcMetricFunctionDef.  # noqa: E501
        :type: list[int]
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalcMetricFunctionDef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalcMetricFunctionDef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
