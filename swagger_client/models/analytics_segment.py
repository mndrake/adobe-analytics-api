# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsSegment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'rsid': 'str',
        'report_suite_name': 'str',
        'owner': 'Owner',
        'definition': 'AnalyticsSegmentDefinition',
        'compatibility': 'SegmentCompatibility',
        'definition_last_modified': 'datetime',
        'categories': 'list[str]',
        'site_title': 'str',
        'tags': 'list[Tag]',
        'modified': 'datetime',
        'created': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'rsid': 'rsid',
        'report_suite_name': 'reportSuiteName',
        'owner': 'owner',
        'definition': 'definition',
        'compatibility': 'compatibility',
        'definition_last_modified': 'definitionLastModified',
        'categories': 'categories',
        'site_title': 'siteTitle',
        'tags': 'tags',
        'modified': 'modified',
        'created': 'created'
    }

    def __init__(self, name=None, description=None, rsid=None, report_suite_name=None, owner=None, definition=None, compatibility=None, definition_last_modified=None, categories=None, site_title=None, tags=None, modified=None, created=None):  # noqa: E501
        """AnalyticsSegment - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._rsid = None
        self._report_suite_name = None
        self._owner = None
        self._definition = None
        self._compatibility = None
        self._definition_last_modified = None
        self._categories = None
        self._site_title = None
        self._tags = None
        self._modified = None
        self._created = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if rsid is not None:
            self.rsid = rsid
        if report_suite_name is not None:
            self.report_suite_name = report_suite_name
        if owner is not None:
            self.owner = owner
        if definition is not None:
            self.definition = definition
        if compatibility is not None:
            self.compatibility = compatibility
        if definition_last_modified is not None:
            self.definition_last_modified = definition_last_modified
        if categories is not None:
            self.categories = categories
        if site_title is not None:
            self.site_title = site_title
        if tags is not None:
            self.tags = tags
        if modified is not None:
            self.modified = modified
        if created is not None:
            self.created = created

    @property
    def name(self):
        """Gets the name of this AnalyticsSegment.  # noqa: E501

        A name for the segment.  # noqa: E501

        :return: The name of this AnalyticsSegment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalyticsSegment.

        A name for the segment.  # noqa: E501

        :param name: The name of this AnalyticsSegment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AnalyticsSegment.  # noqa: E501

        A description of the segment.  # noqa: E501

        :return: The description of this AnalyticsSegment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AnalyticsSegment.

        A description of the segment.  # noqa: E501

        :param description: The description of this AnalyticsSegment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def rsid(self):
        """Gets the rsid of this AnalyticsSegment.  # noqa: E501

        The report suite id.  # noqa: E501

        :return: The rsid of this AnalyticsSegment.  # noqa: E501
        :rtype: str
        """
        return self._rsid

    @rsid.setter
    def rsid(self, rsid):
        """Sets the rsid of this AnalyticsSegment.

        The report suite id.  # noqa: E501

        :param rsid: The rsid of this AnalyticsSegment.  # noqa: E501
        :type: str
        """

        self._rsid = rsid

    @property
    def report_suite_name(self):
        """Gets the report_suite_name of this AnalyticsSegment.  # noqa: E501

        The friendly name for the report suite id.  # noqa: E501

        :return: The report_suite_name of this AnalyticsSegment.  # noqa: E501
        :rtype: str
        """
        return self._report_suite_name

    @report_suite_name.setter
    def report_suite_name(self, report_suite_name):
        """Sets the report_suite_name of this AnalyticsSegment.

        The friendly name for the report suite id.  # noqa: E501

        :param report_suite_name: The report_suite_name of this AnalyticsSegment.  # noqa: E501
        :type: str
        """

        self._report_suite_name = report_suite_name

    @property
    def owner(self):
        """Gets the owner of this AnalyticsSegment.  # noqa: E501


        :return: The owner of this AnalyticsSegment.  # noqa: E501
        :rtype: Owner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this AnalyticsSegment.


        :param owner: The owner of this AnalyticsSegment.  # noqa: E501
        :type: Owner
        """

        self._owner = owner

    @property
    def definition(self):
        """Gets the definition of this AnalyticsSegment.  # noqa: E501


        :return: The definition of this AnalyticsSegment.  # noqa: E501
        :rtype: AnalyticsSegmentDefinition
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this AnalyticsSegment.


        :param definition: The definition of this AnalyticsSegment.  # noqa: E501
        :type: AnalyticsSegmentDefinition
        """

        self._definition = definition

    @property
    def compatibility(self):
        """Gets the compatibility of this AnalyticsSegment.  # noqa: E501


        :return: The compatibility of this AnalyticsSegment.  # noqa: E501
        :rtype: SegmentCompatibility
        """
        return self._compatibility

    @compatibility.setter
    def compatibility(self, compatibility):
        """Sets the compatibility of this AnalyticsSegment.


        :param compatibility: The compatibility of this AnalyticsSegment.  # noqa: E501
        :type: SegmentCompatibility
        """

        self._compatibility = compatibility

    @property
    def definition_last_modified(self):
        """Gets the definition_last_modified of this AnalyticsSegment.  # noqa: E501


        :return: The definition_last_modified of this AnalyticsSegment.  # noqa: E501
        :rtype: datetime
        """
        return self._definition_last_modified

    @definition_last_modified.setter
    def definition_last_modified(self, definition_last_modified):
        """Sets the definition_last_modified of this AnalyticsSegment.


        :param definition_last_modified: The definition_last_modified of this AnalyticsSegment.  # noqa: E501
        :type: datetime
        """

        self._definition_last_modified = definition_last_modified

    @property
    def categories(self):
        """Gets the categories of this AnalyticsSegment.  # noqa: E501


        :return: The categories of this AnalyticsSegment.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this AnalyticsSegment.


        :param categories: The categories of this AnalyticsSegment.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def site_title(self):
        """Gets the site_title of this AnalyticsSegment.  # noqa: E501

        A name for the report suite.  This is deprecated and should use the report suite name instead.  # noqa: E501

        :return: The site_title of this AnalyticsSegment.  # noqa: E501
        :rtype: str
        """
        return self._site_title

    @site_title.setter
    def site_title(self, site_title):
        """Sets the site_title of this AnalyticsSegment.

        A name for the report suite.  This is deprecated and should use the report suite name instead.  # noqa: E501

        :param site_title: The site_title of this AnalyticsSegment.  # noqa: E501
        :type: str
        """

        self._site_title = site_title

    @property
    def tags(self):
        """Gets the tags of this AnalyticsSegment.  # noqa: E501

        All existing tags associated with the segment.  # noqa: E501

        :return: The tags of this AnalyticsSegment.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AnalyticsSegment.

        All existing tags associated with the segment.  # noqa: E501

        :param tags: The tags of this AnalyticsSegment.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def modified(self):
        """Gets the modified of this AnalyticsSegment.  # noqa: E501


        :return: The modified of this AnalyticsSegment.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this AnalyticsSegment.


        :param modified: The modified of this AnalyticsSegment.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def created(self):
        """Gets the created of this AnalyticsSegment.  # noqa: E501


        :return: The created of this AnalyticsSegment.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AnalyticsSegment.


        :param created: The created of this AnalyticsSegment.  # noqa: E501
        :type: datetime
        """

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsSegment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsSegment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
