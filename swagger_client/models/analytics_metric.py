# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsMetric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'name': 'str',
        'type': 'str',
        'extra_title_info': 'str',
        'category': 'str',
        'categories': 'list[str]',
        'support': 'list[str]',
        'allocation': 'bool',
        'precision': 'int',
        'calculated': 'bool',
        'segmentable': 'bool',
        'description': 'str',
        'polarity': 'str',
        'help_link': 'str',
        'allowed_for_reporting': 'bool',
        'tags': 'list[Tag]'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'name': 'name',
        'type': 'type',
        'extra_title_info': 'extraTitleInfo',
        'category': 'category',
        'categories': 'categories',
        'support': 'support',
        'allocation': 'allocation',
        'precision': 'precision',
        'calculated': 'calculated',
        'segmentable': 'segmentable',
        'description': 'description',
        'polarity': 'polarity',
        'help_link': 'helpLink',
        'allowed_for_reporting': 'allowedForReporting',
        'tags': 'tags'
    }

    def __init__(self, id=None, title=None, name=None, type=None, extra_title_info=None, category=None, categories=None, support=None, allocation=None, precision=None, calculated=None, segmentable=None, description=None, polarity=None, help_link=None, allowed_for_reporting=None, tags=None):  # noqa: E501
        """AnalyticsMetric - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._name = None
        self._type = None
        self._extra_title_info = None
        self._category = None
        self._categories = None
        self._support = None
        self._allocation = None
        self._precision = None
        self._calculated = None
        self._segmentable = None
        self._description = None
        self._polarity = None
        self._help_link = None
        self._allowed_for_reporting = None
        self._tags = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if extra_title_info is not None:
            self.extra_title_info = extra_title_info
        if category is not None:
            self.category = category
        if categories is not None:
            self.categories = categories
        if support is not None:
            self.support = support
        if allocation is not None:
            self.allocation = allocation
        if precision is not None:
            self.precision = precision
        if calculated is not None:
            self.calculated = calculated
        if segmentable is not None:
            self.segmentable = segmentable
        if description is not None:
            self.description = description
        if polarity is not None:
            self.polarity = polarity
        if help_link is not None:
            self.help_link = help_link
        if allowed_for_reporting is not None:
            self.allowed_for_reporting = allowed_for_reporting
        if tags is not None:
            self.tags = tags

    @property
    def id(self):
        """Gets the id of this AnalyticsMetric.  # noqa: E501


        :return: The id of this AnalyticsMetric.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnalyticsMetric.


        :param id: The id of this AnalyticsMetric.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this AnalyticsMetric.  # noqa: E501


        :return: The title of this AnalyticsMetric.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AnalyticsMetric.


        :param title: The title of this AnalyticsMetric.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def name(self):
        """Gets the name of this AnalyticsMetric.  # noqa: E501


        :return: The name of this AnalyticsMetric.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalyticsMetric.


        :param name: The name of this AnalyticsMetric.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this AnalyticsMetric.  # noqa: E501


        :return: The type of this AnalyticsMetric.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AnalyticsMetric.


        :param type: The type of this AnalyticsMetric.  # noqa: E501
        :type: str
        """
        allowed_values = ["STRING", "INT", "DECIMAL", "CURRENCY", "PERCENT", "TIME", "ENUM", "ORDERED_ENUM"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def extra_title_info(self):
        """Gets the extra_title_info of this AnalyticsMetric.  # noqa: E501


        :return: The extra_title_info of this AnalyticsMetric.  # noqa: E501
        :rtype: str
        """
        return self._extra_title_info

    @extra_title_info.setter
    def extra_title_info(self, extra_title_info):
        """Sets the extra_title_info of this AnalyticsMetric.


        :param extra_title_info: The extra_title_info of this AnalyticsMetric.  # noqa: E501
        :type: str
        """

        self._extra_title_info = extra_title_info

    @property
    def category(self):
        """Gets the category of this AnalyticsMetric.  # noqa: E501


        :return: The category of this AnalyticsMetric.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AnalyticsMetric.


        :param category: The category of this AnalyticsMetric.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def categories(self):
        """Gets the categories of this AnalyticsMetric.  # noqa: E501


        :return: The categories of this AnalyticsMetric.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this AnalyticsMetric.


        :param categories: The categories of this AnalyticsMetric.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def support(self):
        """Gets the support of this AnalyticsMetric.  # noqa: E501


        :return: The support of this AnalyticsMetric.  # noqa: E501
        :rtype: list[str]
        """
        return self._support

    @support.setter
    def support(self, support):
        """Sets the support of this AnalyticsMetric.


        :param support: The support of this AnalyticsMetric.  # noqa: E501
        :type: list[str]
        """

        self._support = support

    @property
    def allocation(self):
        """Gets the allocation of this AnalyticsMetric.  # noqa: E501


        :return: The allocation of this AnalyticsMetric.  # noqa: E501
        :rtype: bool
        """
        return self._allocation

    @allocation.setter
    def allocation(self, allocation):
        """Sets the allocation of this AnalyticsMetric.


        :param allocation: The allocation of this AnalyticsMetric.  # noqa: E501
        :type: bool
        """

        self._allocation = allocation

    @property
    def precision(self):
        """Gets the precision of this AnalyticsMetric.  # noqa: E501


        :return: The precision of this AnalyticsMetric.  # noqa: E501
        :rtype: int
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this AnalyticsMetric.


        :param precision: The precision of this AnalyticsMetric.  # noqa: E501
        :type: int
        """

        self._precision = precision

    @property
    def calculated(self):
        """Gets the calculated of this AnalyticsMetric.  # noqa: E501


        :return: The calculated of this AnalyticsMetric.  # noqa: E501
        :rtype: bool
        """
        return self._calculated

    @calculated.setter
    def calculated(self, calculated):
        """Sets the calculated of this AnalyticsMetric.


        :param calculated: The calculated of this AnalyticsMetric.  # noqa: E501
        :type: bool
        """

        self._calculated = calculated

    @property
    def segmentable(self):
        """Gets the segmentable of this AnalyticsMetric.  # noqa: E501


        :return: The segmentable of this AnalyticsMetric.  # noqa: E501
        :rtype: bool
        """
        return self._segmentable

    @segmentable.setter
    def segmentable(self, segmentable):
        """Sets the segmentable of this AnalyticsMetric.


        :param segmentable: The segmentable of this AnalyticsMetric.  # noqa: E501
        :type: bool
        """

        self._segmentable = segmentable

    @property
    def description(self):
        """Gets the description of this AnalyticsMetric.  # noqa: E501


        :return: The description of this AnalyticsMetric.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AnalyticsMetric.


        :param description: The description of this AnalyticsMetric.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def polarity(self):
        """Gets the polarity of this AnalyticsMetric.  # noqa: E501


        :return: The polarity of this AnalyticsMetric.  # noqa: E501
        :rtype: str
        """
        return self._polarity

    @polarity.setter
    def polarity(self, polarity):
        """Sets the polarity of this AnalyticsMetric.


        :param polarity: The polarity of this AnalyticsMetric.  # noqa: E501
        :type: str
        """
        allowed_values = ["positive", "negative"]  # noqa: E501
        if polarity not in allowed_values:
            raise ValueError(
                "Invalid value for `polarity` ({0}), must be one of {1}"  # noqa: E501
                .format(polarity, allowed_values)
            )

        self._polarity = polarity

    @property
    def help_link(self):
        """Gets the help_link of this AnalyticsMetric.  # noqa: E501


        :return: The help_link of this AnalyticsMetric.  # noqa: E501
        :rtype: str
        """
        return self._help_link

    @help_link.setter
    def help_link(self, help_link):
        """Sets the help_link of this AnalyticsMetric.


        :param help_link: The help_link of this AnalyticsMetric.  # noqa: E501
        :type: str
        """

        self._help_link = help_link

    @property
    def allowed_for_reporting(self):
        """Gets the allowed_for_reporting of this AnalyticsMetric.  # noqa: E501


        :return: The allowed_for_reporting of this AnalyticsMetric.  # noqa: E501
        :rtype: bool
        """
        return self._allowed_for_reporting

    @allowed_for_reporting.setter
    def allowed_for_reporting(self, allowed_for_reporting):
        """Sets the allowed_for_reporting of this AnalyticsMetric.


        :param allowed_for_reporting: The allowed_for_reporting of this AnalyticsMetric.  # noqa: E501
        :type: bool
        """

        self._allowed_for_reporting = allowed_for_reporting

    @property
    def tags(self):
        """Gets the tags of this AnalyticsMetric.  # noqa: E501


        :return: The tags of this AnalyticsMetric.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AnalyticsMetric.


        :param tags: The tags of this AnalyticsMetric.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsMetric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsMetric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
