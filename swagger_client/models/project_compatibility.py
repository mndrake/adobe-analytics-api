# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectCompatibility(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'valid': 'bool',
        'validator_version': 'str',
        'message': 'str'
    }

    attribute_map = {
        'valid': 'valid',
        'validator_version': 'validatorVersion',
        'message': 'message'
    }

    def __init__(self, valid=None, validator_version=None, message=None):  # noqa: E501
        """ProjectCompatibility - a model defined in Swagger"""  # noqa: E501
        self._valid = None
        self._validator_version = None
        self._message = None
        self.discriminator = None
        if valid is not None:
            self.valid = valid
        if validator_version is not None:
            self.validator_version = validator_version
        if message is not None:
            self.message = message

    @property
    def valid(self):
        """Gets the valid of this ProjectCompatibility.  # noqa: E501


        :return: The valid of this ProjectCompatibility.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this ProjectCompatibility.


        :param valid: The valid of this ProjectCompatibility.  # noqa: E501
        :type: bool
        """

        self._valid = valid

    @property
    def validator_version(self):
        """Gets the validator_version of this ProjectCompatibility.  # noqa: E501


        :return: The validator_version of this ProjectCompatibility.  # noqa: E501
        :rtype: str
        """
        return self._validator_version

    @validator_version.setter
    def validator_version(self, validator_version):
        """Sets the validator_version of this ProjectCompatibility.


        :param validator_version: The validator_version of this ProjectCompatibility.  # noqa: E501
        :type: str
        """

        self._validator_version = validator_version

    @property
    def message(self):
        """Gets the message of this ProjectCompatibility.  # noqa: E501


        :return: The message of this ProjectCompatibility.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ProjectCompatibility.


        :param message: The message of this ProjectCompatibility.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectCompatibility, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectCompatibility):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
