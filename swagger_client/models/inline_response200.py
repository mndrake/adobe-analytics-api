# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'share_id': 'int',
        'success': 'InlineResponse200Success'
    }

    attribute_map = {
        'share_id': 'shareId',
        'success': 'success'
    }

    def __init__(self, share_id=None, success=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501
        self._share_id = None
        self._success = None
        self.discriminator = None
        if share_id is not None:
            self.share_id = share_id
        if success is not None:
            self.success = success

    @property
    def share_id(self):
        """Gets the share_id of this InlineResponse200.  # noqa: E501


        :return: The share_id of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._share_id

    @share_id.setter
    def share_id(self, share_id):
        """Sets the share_id of this InlineResponse200.


        :param share_id: The share_id of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._share_id = share_id

    @property
    def success(self):
        """Gets the success of this InlineResponse200.  # noqa: E501


        :return: The success of this InlineResponse200.  # noqa: E501
        :rtype: InlineResponse200Success
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this InlineResponse200.


        :param success: The success of this InlineResponse200.  # noqa: E501
        :type: InlineResponse200Success
        """

        self._success = success

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
