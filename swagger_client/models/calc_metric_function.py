# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CalcMetricFunction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'category': 'str',
        'persistable': 'bool',
        'name': 'str',
        'namespace': 'str',
        'description': 'str',
        'example_key': 'str',
        'example': 'str',
        'definition': 'CalcMetricFunctionDef'
    }

    attribute_map = {
        'id': 'id',
        'category': 'category',
        'persistable': 'persistable',
        'name': 'name',
        'namespace': 'namespace',
        'description': 'description',
        'example_key': 'exampleKey',
        'example': 'example',
        'definition': 'definition'
    }

    def __init__(self, id=None, category=None, persistable=None, name=None, namespace=None, description=None, example_key=None, example=None, definition=None):  # noqa: E501
        """CalcMetricFunction - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._category = None
        self._persistable = None
        self._name = None
        self._namespace = None
        self._description = None
        self._example_key = None
        self._example = None
        self._definition = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if category is not None:
            self.category = category
        if persistable is not None:
            self.persistable = persistable
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if description is not None:
            self.description = description
        if example_key is not None:
            self.example_key = example_key
        if example is not None:
            self.example = example
        if definition is not None:
            self.definition = definition

    @property
    def id(self):
        """Gets the id of this CalcMetricFunction.  # noqa: E501

        Calculated Metric Function ID  # noqa: E501

        :return: The id of this CalcMetricFunction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CalcMetricFunction.

        Calculated Metric Function ID  # noqa: E501

        :param id: The id of this CalcMetricFunction.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def category(self):
        """Gets the category of this CalcMetricFunction.  # noqa: E501

        Calculated Metric Function category  # noqa: E501

        :return: The category of this CalcMetricFunction.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CalcMetricFunction.

        Calculated Metric Function category  # noqa: E501

        :param category: The category of this CalcMetricFunction.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def persistable(self):
        """Gets the persistable of this CalcMetricFunction.  # noqa: E501

        If a Calculated Metric Function is persistable  # noqa: E501

        :return: The persistable of this CalcMetricFunction.  # noqa: E501
        :rtype: bool
        """
        return self._persistable

    @persistable.setter
    def persistable(self, persistable):
        """Sets the persistable of this CalcMetricFunction.

        If a Calculated Metric Function is persistable  # noqa: E501

        :param persistable: The persistable of this CalcMetricFunction.  # noqa: E501
        :type: bool
        """

        self._persistable = persistable

    @property
    def name(self):
        """Gets the name of this CalcMetricFunction.  # noqa: E501

        Calculated Metric Function name  # noqa: E501

        :return: The name of this CalcMetricFunction.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CalcMetricFunction.

        Calculated Metric Function name  # noqa: E501

        :param name: The name of this CalcMetricFunction.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this CalcMetricFunction.  # noqa: E501

        Calculated Metric Function namespace  # noqa: E501

        :return: The namespace of this CalcMetricFunction.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this CalcMetricFunction.

        Calculated Metric Function namespace  # noqa: E501

        :param namespace: The namespace of this CalcMetricFunction.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def description(self):
        """Gets the description of this CalcMetricFunction.  # noqa: E501

        Calculated Metric Function description  # noqa: E501

        :return: The description of this CalcMetricFunction.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CalcMetricFunction.

        Calculated Metric Function description  # noqa: E501

        :param description: The description of this CalcMetricFunction.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def example_key(self):
        """Gets the example_key of this CalcMetricFunction.  # noqa: E501

        Calculated Metric Function example key  # noqa: E501

        :return: The example_key of this CalcMetricFunction.  # noqa: E501
        :rtype: str
        """
        return self._example_key

    @example_key.setter
    def example_key(self, example_key):
        """Sets the example_key of this CalcMetricFunction.

        Calculated Metric Function example key  # noqa: E501

        :param example_key: The example_key of this CalcMetricFunction.  # noqa: E501
        :type: str
        """

        self._example_key = example_key

    @property
    def example(self):
        """Gets the example of this CalcMetricFunction.  # noqa: E501

        Calculated Metric Function example  # noqa: E501

        :return: The example of this CalcMetricFunction.  # noqa: E501
        :rtype: str
        """
        return self._example

    @example.setter
    def example(self, example):
        """Sets the example of this CalcMetricFunction.

        Calculated Metric Function example  # noqa: E501

        :param example: The example of this CalcMetricFunction.  # noqa: E501
        :type: str
        """

        self._example = example

    @property
    def definition(self):
        """Gets the definition of this CalcMetricFunction.  # noqa: E501


        :return: The definition of this CalcMetricFunction.  # noqa: E501
        :rtype: CalcMetricFunctionDef
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this CalcMetricFunction.


        :param definition: The definition of this CalcMetricFunction.  # noqa: E501
        :type: CalcMetricFunctionDef
        """

        self._definition = definition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalcMetricFunction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalcMetricFunction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
