# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Owner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'login': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'login': 'login'
    }

    def __init__(self, id=None, name=None, login=None):  # noqa: E501
        """Owner - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._login = None
        self.discriminator = None
        self.id = id
        if name is not None:
            self.name = name
        if login is not None:
            self.login = login

    @property
    def id(self):
        """Gets the id of this Owner.  # noqa: E501

        the login id of the owner  # noqa: E501

        :return: The id of this Owner.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Owner.

        the login id of the owner  # noqa: E501

        :param id: The id of this Owner.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Owner.  # noqa: E501

        the friendly full login name of the owner, included when the expansion parameter ownerFullName is true  # noqa: E501

        :return: The name of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Owner.

        the friendly full login name of the owner, included when the expansion parameter ownerFullName is true  # noqa: E501

        :param name: The name of this Owner.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def login(self):
        """Gets the login of this Owner.  # noqa: E501

        the friendly full login name of the owner, included when the expansion parameter ownerFullName is true  # noqa: E501

        :return: The login of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this Owner.

        the friendly full login name of the owner, included when the expansion parameter ownerFullName is true  # noqa: E501

        :param login: The login of this Owner.  # noqa: E501
        :type: str
        """

        self._login = login

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Owner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Owner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
