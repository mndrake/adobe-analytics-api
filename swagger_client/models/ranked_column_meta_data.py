# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RankedColumnMetaData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dimension': 'ReportDimension',
        'column_ids': 'list[str]',
        'column_errors': 'list[RankedColumnError]'
    }

    attribute_map = {
        'dimension': 'dimension',
        'column_ids': 'columnIds',
        'column_errors': 'columnErrors'
    }

    def __init__(self, dimension=None, column_ids=None, column_errors=None):  # noqa: E501
        """RankedColumnMetaData - a model defined in Swagger"""  # noqa: E501
        self._dimension = None
        self._column_ids = None
        self._column_errors = None
        self.discriminator = None
        if dimension is not None:
            self.dimension = dimension
        if column_ids is not None:
            self.column_ids = column_ids
        if column_errors is not None:
            self.column_errors = column_errors

    @property
    def dimension(self):
        """Gets the dimension of this RankedColumnMetaData.  # noqa: E501


        :return: The dimension of this RankedColumnMetaData.  # noqa: E501
        :rtype: ReportDimension
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this RankedColumnMetaData.


        :param dimension: The dimension of this RankedColumnMetaData.  # noqa: E501
        :type: ReportDimension
        """

        self._dimension = dimension

    @property
    def column_ids(self):
        """Gets the column_ids of this RankedColumnMetaData.  # noqa: E501


        :return: The column_ids of this RankedColumnMetaData.  # noqa: E501
        :rtype: list[str]
        """
        return self._column_ids

    @column_ids.setter
    def column_ids(self, column_ids):
        """Sets the column_ids of this RankedColumnMetaData.


        :param column_ids: The column_ids of this RankedColumnMetaData.  # noqa: E501
        :type: list[str]
        """

        self._column_ids = column_ids

    @property
    def column_errors(self):
        """Gets the column_errors of this RankedColumnMetaData.  # noqa: E501


        :return: The column_errors of this RankedColumnMetaData.  # noqa: E501
        :rtype: list[RankedColumnError]
        """
        return self._column_errors

    @column_errors.setter
    def column_errors(self, column_errors):
        """Sets the column_errors of this RankedColumnMetaData.


        :param column_errors: The column_errors of this RankedColumnMetaData.  # noqa: E501
        :type: list[RankedColumnError]
        """

        self._column_errors = column_errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RankedColumnMetaData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RankedColumnMetaData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
