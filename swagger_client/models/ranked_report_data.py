# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RankedReportData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_pages': 'int',
        'first_page': 'bool',
        'last_page': 'bool',
        'number_of_elements': 'int',
        'number': 'int',
        'total_elements': 'int',
        'message': 'str',
        'request': 'RankedRequest',
        'report_id': 'str',
        'columns': 'RankedColumnMetaData',
        'rows': 'list[Row]',
        'summary_data': 'RankedSummaryData'
    }

    attribute_map = {
        'total_pages': 'totalPages',
        'first_page': 'firstPage',
        'last_page': 'lastPage',
        'number_of_elements': 'numberOfElements',
        'number': 'number',
        'total_elements': 'totalElements',
        'message': 'message',
        'request': 'request',
        'report_id': 'reportId',
        'columns': 'columns',
        'rows': 'rows',
        'summary_data': 'summaryData'
    }

    def __init__(self, total_pages=None, first_page=None, last_page=None, number_of_elements=None, number=None, total_elements=None, message=None, request=None, report_id=None, columns=None, rows=None, summary_data=None):  # noqa: E501
        """RankedReportData - a model defined in Swagger"""  # noqa: E501
        self._total_pages = None
        self._first_page = None
        self._last_page = None
        self._number_of_elements = None
        self._number = None
        self._total_elements = None
        self._message = None
        self._request = None
        self._report_id = None
        self._columns = None
        self._rows = None
        self._summary_data = None
        self.discriminator = None
        if total_pages is not None:
            self.total_pages = total_pages
        if first_page is not None:
            self.first_page = first_page
        if last_page is not None:
            self.last_page = last_page
        if number_of_elements is not None:
            self.number_of_elements = number_of_elements
        if number is not None:
            self.number = number
        if total_elements is not None:
            self.total_elements = total_elements
        if message is not None:
            self.message = message
        if request is not None:
            self.request = request
        if report_id is not None:
            self.report_id = report_id
        if columns is not None:
            self.columns = columns
        if rows is not None:
            self.rows = rows
        if summary_data is not None:
            self.summary_data = summary_data

    @property
    def total_pages(self):
        """Gets the total_pages of this RankedReportData.  # noqa: E501


        :return: The total_pages of this RankedReportData.  # noqa: E501
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this RankedReportData.


        :param total_pages: The total_pages of this RankedReportData.  # noqa: E501
        :type: int
        """

        self._total_pages = total_pages

    @property
    def first_page(self):
        """Gets the first_page of this RankedReportData.  # noqa: E501


        :return: The first_page of this RankedReportData.  # noqa: E501
        :rtype: bool
        """
        return self._first_page

    @first_page.setter
    def first_page(self, first_page):
        """Sets the first_page of this RankedReportData.


        :param first_page: The first_page of this RankedReportData.  # noqa: E501
        :type: bool
        """

        self._first_page = first_page

    @property
    def last_page(self):
        """Gets the last_page of this RankedReportData.  # noqa: E501


        :return: The last_page of this RankedReportData.  # noqa: E501
        :rtype: bool
        """
        return self._last_page

    @last_page.setter
    def last_page(self, last_page):
        """Sets the last_page of this RankedReportData.


        :param last_page: The last_page of this RankedReportData.  # noqa: E501
        :type: bool
        """

        self._last_page = last_page

    @property
    def number_of_elements(self):
        """Gets the number_of_elements of this RankedReportData.  # noqa: E501


        :return: The number_of_elements of this RankedReportData.  # noqa: E501
        :rtype: int
        """
        return self._number_of_elements

    @number_of_elements.setter
    def number_of_elements(self, number_of_elements):
        """Sets the number_of_elements of this RankedReportData.


        :param number_of_elements: The number_of_elements of this RankedReportData.  # noqa: E501
        :type: int
        """

        self._number_of_elements = number_of_elements

    @property
    def number(self):
        """Gets the number of this RankedReportData.  # noqa: E501


        :return: The number of this RankedReportData.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this RankedReportData.


        :param number: The number of this RankedReportData.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def total_elements(self):
        """Gets the total_elements of this RankedReportData.  # noqa: E501


        :return: The total_elements of this RankedReportData.  # noqa: E501
        :rtype: int
        """
        return self._total_elements

    @total_elements.setter
    def total_elements(self, total_elements):
        """Sets the total_elements of this RankedReportData.


        :param total_elements: The total_elements of this RankedReportData.  # noqa: E501
        :type: int
        """

        self._total_elements = total_elements

    @property
    def message(self):
        """Gets the message of this RankedReportData.  # noqa: E501


        :return: The message of this RankedReportData.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this RankedReportData.


        :param message: The message of this RankedReportData.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def request(self):
        """Gets the request of this RankedReportData.  # noqa: E501


        :return: The request of this RankedReportData.  # noqa: E501
        :rtype: RankedRequest
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this RankedReportData.


        :param request: The request of this RankedReportData.  # noqa: E501
        :type: RankedRequest
        """

        self._request = request

    @property
    def report_id(self):
        """Gets the report_id of this RankedReportData.  # noqa: E501


        :return: The report_id of this RankedReportData.  # noqa: E501
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this RankedReportData.


        :param report_id: The report_id of this RankedReportData.  # noqa: E501
        :type: str
        """

        self._report_id = report_id

    @property
    def columns(self):
        """Gets the columns of this RankedReportData.  # noqa: E501


        :return: The columns of this RankedReportData.  # noqa: E501
        :rtype: RankedColumnMetaData
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this RankedReportData.


        :param columns: The columns of this RankedReportData.  # noqa: E501
        :type: RankedColumnMetaData
        """

        self._columns = columns

    @property
    def rows(self):
        """Gets the rows of this RankedReportData.  # noqa: E501


        :return: The rows of this RankedReportData.  # noqa: E501
        :rtype: list[Row]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this RankedReportData.


        :param rows: The rows of this RankedReportData.  # noqa: E501
        :type: list[Row]
        """

        self._rows = rows

    @property
    def summary_data(self):
        """Gets the summary_data of this RankedReportData.  # noqa: E501


        :return: The summary_data of this RankedReportData.  # noqa: E501
        :rtype: RankedSummaryData
        """
        return self._summary_data

    @summary_data.setter
    def summary_data(self, summary_data):
        """Sets the summary_data of this RankedReportData.


        :param summary_data: The summary_data of this RankedReportData.  # noqa: E501
        :type: RankedSummaryData
        """

        self._summary_data = summary_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RankedReportData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RankedReportData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
