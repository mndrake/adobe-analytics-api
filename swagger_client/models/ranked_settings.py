# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RankedSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'limit': 'int',
        'page': 'int',
        'dimension_sort': 'str',
        'count_repeat_instances': 'bool',
        'reflect_request': 'bool',
        'include_anomaly_detection': 'bool',
        'include_percent_change': 'bool',
        'include_lat_long': 'bool',
        'nones_behavior': 'str'
    }

    attribute_map = {
        'limit': 'limit',
        'page': 'page',
        'dimension_sort': 'dimensionSort',
        'count_repeat_instances': 'countRepeatInstances',
        'reflect_request': 'reflectRequest',
        'include_anomaly_detection': 'includeAnomalyDetection',
        'include_percent_change': 'includePercentChange',
        'include_lat_long': 'includeLatLong',
        'nones_behavior': 'nonesBehavior'
    }

    def __init__(self, limit=None, page=None, dimension_sort=None, count_repeat_instances=None, reflect_request=None, include_anomaly_detection=None, include_percent_change=None, include_lat_long=None, nones_behavior=None):  # noqa: E501
        """RankedSettings - a model defined in Swagger"""  # noqa: E501
        self._limit = None
        self._page = None
        self._dimension_sort = None
        self._count_repeat_instances = None
        self._reflect_request = None
        self._include_anomaly_detection = None
        self._include_percent_change = None
        self._include_lat_long = None
        self._nones_behavior = None
        self.discriminator = None
        if limit is not None:
            self.limit = limit
        if page is not None:
            self.page = page
        if dimension_sort is not None:
            self.dimension_sort = dimension_sort
        if count_repeat_instances is not None:
            self.count_repeat_instances = count_repeat_instances
        if reflect_request is not None:
            self.reflect_request = reflect_request
        if include_anomaly_detection is not None:
            self.include_anomaly_detection = include_anomaly_detection
        if include_percent_change is not None:
            self.include_percent_change = include_percent_change
        if include_lat_long is not None:
            self.include_lat_long = include_lat_long
        if nones_behavior is not None:
            self.nones_behavior = nones_behavior

    @property
    def limit(self):
        """Gets the limit of this RankedSettings.  # noqa: E501


        :return: The limit of this RankedSettings.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this RankedSettings.


        :param limit: The limit of this RankedSettings.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def page(self):
        """Gets the page of this RankedSettings.  # noqa: E501


        :return: The page of this RankedSettings.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this RankedSettings.


        :param page: The page of this RankedSettings.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def dimension_sort(self):
        """Gets the dimension_sort of this RankedSettings.  # noqa: E501


        :return: The dimension_sort of this RankedSettings.  # noqa: E501
        :rtype: str
        """
        return self._dimension_sort

    @dimension_sort.setter
    def dimension_sort(self, dimension_sort):
        """Sets the dimension_sort of this RankedSettings.


        :param dimension_sort: The dimension_sort of this RankedSettings.  # noqa: E501
        :type: str
        """

        self._dimension_sort = dimension_sort

    @property
    def count_repeat_instances(self):
        """Gets the count_repeat_instances of this RankedSettings.  # noqa: E501


        :return: The count_repeat_instances of this RankedSettings.  # noqa: E501
        :rtype: bool
        """
        return self._count_repeat_instances

    @count_repeat_instances.setter
    def count_repeat_instances(self, count_repeat_instances):
        """Sets the count_repeat_instances of this RankedSettings.


        :param count_repeat_instances: The count_repeat_instances of this RankedSettings.  # noqa: E501
        :type: bool
        """

        self._count_repeat_instances = count_repeat_instances

    @property
    def reflect_request(self):
        """Gets the reflect_request of this RankedSettings.  # noqa: E501


        :return: The reflect_request of this RankedSettings.  # noqa: E501
        :rtype: bool
        """
        return self._reflect_request

    @reflect_request.setter
    def reflect_request(self, reflect_request):
        """Sets the reflect_request of this RankedSettings.


        :param reflect_request: The reflect_request of this RankedSettings.  # noqa: E501
        :type: bool
        """

        self._reflect_request = reflect_request

    @property
    def include_anomaly_detection(self):
        """Gets the include_anomaly_detection of this RankedSettings.  # noqa: E501


        :return: The include_anomaly_detection of this RankedSettings.  # noqa: E501
        :rtype: bool
        """
        return self._include_anomaly_detection

    @include_anomaly_detection.setter
    def include_anomaly_detection(self, include_anomaly_detection):
        """Sets the include_anomaly_detection of this RankedSettings.


        :param include_anomaly_detection: The include_anomaly_detection of this RankedSettings.  # noqa: E501
        :type: bool
        """

        self._include_anomaly_detection = include_anomaly_detection

    @property
    def include_percent_change(self):
        """Gets the include_percent_change of this RankedSettings.  # noqa: E501


        :return: The include_percent_change of this RankedSettings.  # noqa: E501
        :rtype: bool
        """
        return self._include_percent_change

    @include_percent_change.setter
    def include_percent_change(self, include_percent_change):
        """Sets the include_percent_change of this RankedSettings.


        :param include_percent_change: The include_percent_change of this RankedSettings.  # noqa: E501
        :type: bool
        """

        self._include_percent_change = include_percent_change

    @property
    def include_lat_long(self):
        """Gets the include_lat_long of this RankedSettings.  # noqa: E501


        :return: The include_lat_long of this RankedSettings.  # noqa: E501
        :rtype: bool
        """
        return self._include_lat_long

    @include_lat_long.setter
    def include_lat_long(self, include_lat_long):
        """Sets the include_lat_long of this RankedSettings.


        :param include_lat_long: The include_lat_long of this RankedSettings.  # noqa: E501
        :type: bool
        """

        self._include_lat_long = include_lat_long

    @property
    def nones_behavior(self):
        """Gets the nones_behavior of this RankedSettings.  # noqa: E501


        :return: The nones_behavior of this RankedSettings.  # noqa: E501
        :rtype: str
        """
        return self._nones_behavior

    @nones_behavior.setter
    def nones_behavior(self, nones_behavior):
        """Sets the nones_behavior of this RankedSettings.


        :param nones_behavior: The nones_behavior of this RankedSettings.  # noqa: E501
        :type: str
        """

        self._nones_behavior = nones_behavior

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RankedSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RankedSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
