# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CollectionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def find_all(self, **kwargs):  # noqa: E501
        """Retrieves report suites that match the given filters.  # noqa: E501

        Returns all report suite types in a single collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rsids: Filter list to only include suites in this RSID list (comma-delimited)
        :param str rsid_contains: Filter list to only include suites whose rsid contains rsidContains.
        :param int limit: Number of results per page
        :param int page: Page number (base 0 - first page is \"0\")
        :param list[str] expansion: Comma-delimited list of additional metadata fields to include on response.
        :return: SuiteCollectionItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_all_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves report suites that match the given filters.  # noqa: E501

        Returns all report suite types in a single collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rsids: Filter list to only include suites in this RSID list (comma-delimited)
        :param str rsid_contains: Filter list to only include suites whose rsid contains rsidContains.
        :param int limit: Number of results per page
        :param int page: Page number (base 0 - first page is \"0\")
        :param list[str] expansion: Comma-delimited list of additional metadata fields to include on response.
        :return: SuiteCollectionItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rsids', 'rsid_contains', 'limit', 'page', 'expansion']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rsids' in params:
            query_params.append(('rsids', params['rsids']))  # noqa: E501
        if 'rsid_contains' in params:
            query_params.append(('rsidContains', params['rsid_contains']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'expansion' in params:
            query_params.append(('expansion', params['expansion']))  # noqa: E501
            collection_formats['expansion'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/suites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuiteCollectionItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_one(self, rsid, **kwargs):  # noqa: E501
        """Retrieves report suite by id  # noqa: E501

        Returns all report suite types in a single collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_one(rsid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rsid: The rsid of the suite to return (required)
        :param list[str] expansion: Comma-delimited list of additional metadata fields to include on response.
        :return: SuiteCollectionItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_one_with_http_info(rsid, **kwargs)  # noqa: E501
        else:
            (data) = self.find_one_with_http_info(rsid, **kwargs)  # noqa: E501
            return data

    def find_one_with_http_info(self, rsid, **kwargs):  # noqa: E501
        """Retrieves report suite by id  # noqa: E501

        Returns all report suite types in a single collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_one_with_http_info(rsid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rsid: The rsid of the suite to return (required)
        :param list[str] expansion: Comma-delimited list of additional metadata fields to include on response.
        :return: SuiteCollectionItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rsid', 'expansion']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rsid' is set
        if ('rsid' not in params or
                params['rsid'] is None):
            raise ValueError("Missing the required parameter `rsid` when calling `find_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rsid' in params:
            path_params['rsid'] = params['rsid']  # noqa: E501

        query_params = []
        if 'expansion' in params:
            query_params.append(('expansion', params['expansion']))  # noqa: E501
            collection_formats['expansion'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/collections/suites/{rsid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuiteCollectionItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
