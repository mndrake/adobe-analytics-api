# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SegmentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def segments_create_segment(self, body, **kwargs):  # noqa: E501
        """Creates Segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.segments_create_segment(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AnalyticsSegment body: JSON-formatted Object containing key/value pairs for segment creation. (required)
        :param str locale: Locale
        :param list[str] expansion: Comma-delimited list of additional segment metadata fields to include on response.
        :return: AnalyticsSegmentResponseItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.segments_create_segment_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.segments_create_segment_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def segments_create_segment_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates Segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.segments_create_segment_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AnalyticsSegment body: JSON-formatted Object containing key/value pairs for segment creation. (required)
        :param str locale: Locale
        :param list[str] expansion: Comma-delimited list of additional segment metadata fields to include on response.
        :return: AnalyticsSegmentResponseItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'locale', 'expansion']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method segments_create_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `segments_create_segment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501
        if 'expansion' in params:
            query_params.append(('expansion', params['expansion']))  # noqa: E501
            collection_formats['expansion'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/segments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalyticsSegmentResponseItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def segments_delete_segment(self, id, **kwargs):  # noqa: E501
        """Delete Segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.segments_delete_segment(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The segment ID to be deleted (required)
        :param str locale: Locale
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.segments_delete_segment_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.segments_delete_segment_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def segments_delete_segment_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete Segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.segments_delete_segment_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The segment ID to be deleted (required)
        :param str locale: Locale
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method segments_delete_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `segments_delete_segment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/segments/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def segments_get_segment(self, id, **kwargs):  # noqa: E501
        """Get a Single Segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.segments_get_segment(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The segment ID to retrieve (required)
        :param str locale: Locale
        :param list[str] expansion: Comma-delimited list of additional segment metadata fields to include on response.
        :return: AnalyticsSegmentResponseItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.segments_get_segment_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.segments_get_segment_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def segments_get_segment_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a Single Segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.segments_get_segment_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The segment ID to retrieve (required)
        :param str locale: Locale
        :param list[str] expansion: Comma-delimited list of additional segment metadata fields to include on response.
        :return: AnalyticsSegmentResponseItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'locale', 'expansion']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method segments_get_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `segments_get_segment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501
        if 'expansion' in params:
            query_params.append(('expansion', params['expansion']))  # noqa: E501
            collection_formats['expansion'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/segments/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalyticsSegmentResponseItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def segments_get_segments(self, **kwargs):  # noqa: E501
        """Retrieve All Segments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.segments_get_segments(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rsids: Filter list to only include segments tied to specified RSID list (comma-delimited)
        :param str segment_filter: Filter list to only include segments in the specified list (comma-delimited list of IDs)
        :param str locale: Locale
        :param str name: Filter list to only include segments that contains the Name
        :param str tag_names: Filter list to only include segments that contains one of the tags
        :param str filter_by_published_segments: Filter list to only include segments where the published field is set to one of the allowable values (all, true, false).
        :param int limit: Number of results per page
        :param int page: Page number (base 0 - first page is \"0\")
        :param str sort_direction: Sort direction (ASC or DESC
        :param str sort_property: Property to sort by (name, modified_date, id is currently allowed)
        :param list[str] expansion: Comma-delimited list of additional segment metadata fields to include on response.
        :param list[str] include_type: Include additional segments not owned by user. The \"all\" option takes precedence over \"shared\"
        :return: AnalyticsSegmentResponseItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.segments_get_segments_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.segments_get_segments_with_http_info(**kwargs)  # noqa: E501
            return data

    def segments_get_segments_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve All Segments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.segments_get_segments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rsids: Filter list to only include segments tied to specified RSID list (comma-delimited)
        :param str segment_filter: Filter list to only include segments in the specified list (comma-delimited list of IDs)
        :param str locale: Locale
        :param str name: Filter list to only include segments that contains the Name
        :param str tag_names: Filter list to only include segments that contains one of the tags
        :param str filter_by_published_segments: Filter list to only include segments where the published field is set to one of the allowable values (all, true, false).
        :param int limit: Number of results per page
        :param int page: Page number (base 0 - first page is \"0\")
        :param str sort_direction: Sort direction (ASC or DESC
        :param str sort_property: Property to sort by (name, modified_date, id is currently allowed)
        :param list[str] expansion: Comma-delimited list of additional segment metadata fields to include on response.
        :param list[str] include_type: Include additional segments not owned by user. The \"all\" option takes precedence over \"shared\"
        :return: AnalyticsSegmentResponseItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rsids', 'segment_filter', 'locale', 'name', 'tag_names', 'filter_by_published_segments', 'limit', 'page', 'sort_direction', 'sort_property', 'expansion', 'include_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method segments_get_segments" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rsids' in params:
            query_params.append(('rsids', params['rsids']))  # noqa: E501
        if 'segment_filter' in params:
            query_params.append(('segmentFilter', params['segment_filter']))  # noqa: E501
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'tag_names' in params:
            query_params.append(('tagNames', params['tag_names']))  # noqa: E501
        if 'filter_by_published_segments' in params:
            query_params.append(('filterByPublishedSegments', params['filter_by_published_segments']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sortDirection', params['sort_direction']))  # noqa: E501
        if 'sort_property' in params:
            query_params.append(('sortProperty', params['sort_property']))  # noqa: E501
        if 'expansion' in params:
            query_params.append(('expansion', params['expansion']))  # noqa: E501
            collection_formats['expansion'] = 'csv'  # noqa: E501
        if 'include_type' in params:
            query_params.append(('includeType', params['include_type']))  # noqa: E501
            collection_formats['includeType'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/segments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalyticsSegmentResponseItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def segments_update_segment(self, id, **kwargs):  # noqa: E501
        """Update a Segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.segments_update_segment(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Segment ID to be updated (required)
        :param dict(str, object) body: JSON-formatted Object containing key/value pairs to be updated.
        :param str locale: Locale
        :param list[str] expansion: Comma-delimited list of additional segment metadata fields to include on response.
        :return: AnalyticsSegmentResponseItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.segments_update_segment_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.segments_update_segment_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def segments_update_segment_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a Segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.segments_update_segment_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Segment ID to be updated (required)
        :param dict(str, object) body: JSON-formatted Object containing key/value pairs to be updated.
        :param str locale: Locale
        :param list[str] expansion: Comma-delimited list of additional segment metadata fields to include on response.
        :return: AnalyticsSegmentResponseItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'locale', 'expansion']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method segments_update_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `segments_update_segment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501
        if 'expansion' in params:
            query_params.append(('expansion', params['expansion']))  # noqa: E501
            collection_formats['expansion'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/segments/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalyticsSegmentResponseItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def segments_validate_segment(self, body, rsid, **kwargs):  # noqa: E501
        """Validate a Segment  # noqa: E501

        Returns a segment validation for the segment contained in the post body of the report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.segments_validate_segment(body, rsid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: Segment definition (required)
        :param str rsid: RSID to run the report against (required)
        :return: SegmentCompatibility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.segments_validate_segment_with_http_info(body, rsid, **kwargs)  # noqa: E501
        else:
            (data) = self.segments_validate_segment_with_http_info(body, rsid, **kwargs)  # noqa: E501
            return data

    def segments_validate_segment_with_http_info(self, body, rsid, **kwargs):  # noqa: E501
        """Validate a Segment  # noqa: E501

        Returns a segment validation for the segment contained in the post body of the report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.segments_validate_segment_with_http_info(body, rsid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: Segment definition (required)
        :param str rsid: RSID to run the report against (required)
        :return: SegmentCompatibility
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'rsid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method segments_validate_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `segments_validate_segment`")  # noqa: E501
        # verify the required parameter 'rsid' is set
        if ('rsid' not in params or
                params['rsid'] is None):
            raise ValueError("Missing the required parameter `rsid` when calling `segments_validate_segment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rsid' in params:
            query_params.append(('rsid', params['rsid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/segments/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SegmentCompatibility',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
