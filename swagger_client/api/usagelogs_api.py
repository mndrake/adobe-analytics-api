# coding: utf-8

"""
    Adobe Analytics APIs

    The endpoints described here are routed through Adobe.io.          In order to use these endpoints you must create an oAuth client that is          subscribed to access the Adobe Analytics Reporting API.  # noqa: E501

    OpenAPI spec version: v1 - Build: 2019-10-03_20:32:29.323
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UsagelogsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_usage_access_logs(self, start_date, end_date, **kwargs):  # noqa: E501
        """Retrieves usage and access logs for the search criteria provided.  # noqa: E501

        This API returns the usage and access logs for a given date range within a 3 month period. This API authenticates with an IMS user token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_usage_access_logs(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date: Start date for the maximum of a 3 month period. (required)
        :param str end_date: End date for the maximum of a 3 month period. (required)
        :param str login: The login value of the user you want to filter logs by.
        :param str ip: The IP address you want to filter logs by.
        :param str rsid: The report suite ID you want to filter logs by.
        :param str event_type: The numeric id for the event type you want to filter logs by.
        :param str event: The event description you want to filter logs by. No wildcards permitted.
        :param int limit: Number of results per page.
        :param int page: Page number (base 0 - first page is \"0\").
        :return: ResponsePageUsageLogDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_usage_access_logs_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
        else:
            (data) = self.get_usage_access_logs_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
            return data

    def get_usage_access_logs_with_http_info(self, start_date, end_date, **kwargs):  # noqa: E501
        """Retrieves usage and access logs for the search criteria provided.  # noqa: E501

        This API returns the usage and access logs for a given date range within a 3 month period. This API authenticates with an IMS user token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_usage_access_logs_with_http_info(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date: Start date for the maximum of a 3 month period. (required)
        :param str end_date: End date for the maximum of a 3 month period. (required)
        :param str login: The login value of the user you want to filter logs by.
        :param str ip: The IP address you want to filter logs by.
        :param str rsid: The report suite ID you want to filter logs by.
        :param str event_type: The numeric id for the event type you want to filter logs by.
        :param str event: The event description you want to filter logs by. No wildcards permitted.
        :param int limit: Number of results per page.
        :param int page: Page number (base 0 - first page is \"0\").
        :return: ResponsePageUsageLogDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'login', 'ip', 'rsid', 'event_type', 'event', 'limit', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_usage_access_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `get_usage_access_logs`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `get_usage_access_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'ip' in params:
            query_params.append(('ip', params['ip']))  # noqa: E501
        if 'rsid' in params:
            query_params.append(('rsid', params['rsid']))  # noqa: E501
        if 'event_type' in params:
            query_params.append(('eventType', params['event_type']))  # noqa: E501
        if 'event' in params:
            query_params.append(('event', params['event']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auditlogs/usage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponsePageUsageLogDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
